using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using Hanhua.Common;
using Hanhua.ImgEditTools;

namespace Hanhua.TextEditTools.Bio2Edit
{
    /// <summary>
    /// 生化危机2文本编辑器
    /// </summary>
    public partial class Bio2TextEditor : BaseTextEditor
    {
        #region " 本地变量 "

        #region " 字库 "

        #region " 日文字库 "

        /// <summary>
        /// 生化危机2字库0x00--0xEA
        /// </summary>
        private string[] jpFontChars00Ee = { 
 "　", ".", "▷", "「", "」", "（", "）", "『", "』", "【", "】", "▿", "0", "1", "2", "3", "4", "5"
,"6", "7", "8", "9", "：", "、", "，", "”", "！", "？", "⁉", "A", "B", "C", "D", "E", "F", "G"
,"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y"
,"Z", "[", "╱", "]", "'", "一", "・", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"
,"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "あ", "い", "う"
,"え", "お", "か", "き", "く", "け", "こ", "さ", "し", "す", "せ", "そ", "た", "ち", "つ", "て", "と", "な"
,"に", "ぬ", "ね", "の", "は", "ひ", "ふ", "敗", "ほ", "ま", "み", "む", "め", "も", "や", "ゆ", "よ", "ら"
,"り", "る", "れ", "ろ", "わ", "を", "ん", "が", "ぎ", "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ"
,"ぢ", "づ", "で", "ど", "ば", "び", "ぶ", "べ", "ぼ", "ぱ", "ぴ", "ぷ", "▵", "ぽ", "ぁ", "ぃ", "ぅ", "ぇ"
,"ぉ", "ゃ", "ゅ", "ょ", "っ", "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク", "ケ", "コ", "サ", "シ", "ス"
,"セ", "ソ", "タ", "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ"
,"ミ", "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ヲ", "ン", "ガ", "ギ", "グ"
,"ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ"
,"ピ", "プ", "ペ", "ポ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ャ", "ュ", "ョ", "ッ", "ヴ", "-", "―", "L2", "R2"
,"＆", "…", "矢", "炎", "L1", "R1", "△", "○", "☓", "☐", "■", "☓", "上", "右", "下", "左", "使", "用"
,"出", "弹", "来", "事", "開", "何", "銃", "力", "社", "爆", "小", "強", "発", "製", "刻", "大", "電", "先"
        };

        /// <summary>
        /// 生化危机2字库0xEB
        /// </summary>
        private string[] jpFontCharsEfF0 = { 
 "書", "型", "動", "角", "気", "合", "撃", "長", "器", "物", "込", "石", "射", "形", "赤", "部", "入", "鉄"
,"拳", "差", "無", "料", "体", "付", "火", "武", "品", "組", "燃", "放", "実", "験", "跡", "青", "宝", "重"
,"意", "味", "図", "室", "屋", "写", "時", "復", "学", "化", "全", "行", "回", "分", "量", "薬", "連", "軍"
,"内", "閉", "消", "録", "血", "蛇", "毒", "理", "破", "外", "簡", "真", "単", "作", "試", "記", "信", "管"
,"計", "木", "退", "硫", "酸", "圧", "対", "高", "多", "様", "機", "後", "反", "切", "署", "机", "裏", "役"
,"立", "中", "救", "急", "解", "日", "向", "取", "察", "警", "特", "要", "源", "装", "置", "生", "調", "一"
,"庫", "車", "程", "倉", "超", "導", "殊", "金", "歯", "編", "古", "査", "状", "況", "待", "暗", "処", "水"
,"第", "場", "研", "究", "所", "備", "姿", "必", "存", "者", "失", "報", "手", "告", "覧", "秘", "保", "安"
,"戦", "施", "設", "宿", "直", "登", "方", "法", "員", "表", "成", "今", "版", "人", "関", "", "", ""
,"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
,"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
,"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
,"私", "通", "見", "危", "女", "壊", "探", "険", "棚", "押", "絡", "工", "家", "本", "Ｓ", "逃", "知", "彼"
,"脱", "君", "崩", "々", "並", "街", "落", "丈", "夫", "路", "働", "話", "前", "間", "俺", "月", "当", "口"
,"風", "整", "", "性", "台", "勇", "絵", "神", "情", "Ｔ", "Ａ", "Ｒ", "兄", "離", "誰", "悪", "目", "息"
,"地", "降", "不", "聞", "次", "給", "槽", "裂", "漏", "光", "油", "他", "術", "階", "持", "現", "板", "描"
,"捜", "企", "業", "好", "達", "男", "恋", "新", "件", "数", "得", "", "", "", "", "", "", ""
,"引", "起", "完", "焼", "払", "", "", "", "", "", "戻", "", "着", "美", "像", "", "子", "穴"
        };

        /// <summary>
        /// 生化危机2字库3
        /// </summary>
        private string[] jpFontCharsEfF02 = { 
 "駐", "利", "規", "則", "頑", "丈", "故", "変", "停", "郵", "便", "集", "閉", "供", "給", "足", "建", "築"
,"程", "抜", "身", "明", "航", "海", "旅", "人", "越", "再", "始", "路", "固", "話", "隊", "投", "由", "助"
,"態", "俺", "饲", "犬", "達", "雇", "叩", "和", "間", "任", "務", "当", "信", "気", "流", "難", "立", "風"
,"孔", "止", "置", "独", "占", "山", "地", "猟", "奇", "件", "謎", "送", "目", "考", "台", "丸", "税", "支"
,"払", "街", "貴", "方", "政", "周", "年", "念", "完", "碑", "非", "昇", "降", "茶", "犠", "牲", "寝", "彼"
,"八", "勘", "腹", "企", "関", "私", "協", "障", "運", "転", "席", "注", "意", "駅", "案", "内", "断", "線"
,"損", "底", "仲", "会", "娘", "延", "普", "奥", "夫", "落", "着", "寄", "女", "危", "険", "曹", "我", "点"
,"塔", "移", "歩", "番", "問", "題", "災", "隔", "各", "帰", "楽", "辺", "良", "確", "認", "図", "収", "乗"
,"友", "仕", "後", "甲", "斐", "負", "傷", "勢", "眠", "群", "遠", "吠", "嗅", "少", "存", "子", "洗", "浄"
,"並", "雑", "然", "油", "穴", "折", "殺", "耳", "鳴", "拾", "資", "散", "乱", "窓", "細", "見", "失", "酔"
,"嬢", "派", "遣", "策", "奴", "飛", "隠", "尻", "慢", "野", "郎", "腫", "食", "味", "防", "可", "燃", "引"
,"面", "伍", "君", "逃", "堂", "焼", "早", "胸", "元", "脱", "圧", "老", "朽", "漏", "格", "壊", "影", "響"
,"前", "高", "域", "室", "読", "段", "階", "慟", "両", "赤", "苦", "痛", "顔", "等", "学", "与", "未", "充"
        };

        /// <summary>
        /// 生化危机2字库4
        /// </summary>
        private string[] jpFontCharsEfF03 = { 
 "祭", "壇", "間", "気", "丈", "夫", "服", "怪", "彼", "帰", "男", "目", "野", "郎", "俺", "達", "観", "敵"
,"役", "立", "悪", "人", "心", "後", "流", "信", "待", "伏", "私", "身", "恐", "奴", "詳", "許", "街", "還"
,"予", "休", "収", "画", "決", "選", "暖", "炉", "尽", "変", "散", "互", "仕", "方", "苦", "表", "情", "毒"
,"冒", "受", "皿", "巫", "女", "乗", "過", "去", "現", "在", "未", "家", "積", "雑", "然", "塔", "鐘", "扉"
,"前", "置", "侵", "防", "娘", "仲", "任", "務", "落", "床", "照", "明", "銅", "板", "穴", "次", "演", "奏"
,"年", "寄", "贈", "頼", "覚", "眠", "月", "夜", "雨", "響", "逆", "礼", "拝", "堂", "痛", "怖", "薄", "弱"
,"白", "旗", "念", "訴", "戻", "旋", "律", "狂", "荒", "段", "崩", "柱", "壊", "早", "治"
        };

        /// <summary>
        /// 生化危机2字库5
        /// </summary>
        private string[] jpFontCharsEfF04 = { 
 "完", "暗", "見", "私", "立", "間", "随", "受", "壊", "頑", "丈", "降", "話", "健", "康", "険", "案", "内"
,"守", "変", "非", "灯", "閉", "荒", "跡", "飲", "催", "認", "移", "止", "点", "滴", "注", "意", "閲", "覧"
,"資", "山", "地", "目", "横", "紙", "詳", "得", "達", "漬", "関", "掲", "学", "籍", "並", "台", "療", "置"
,"階", "掛", "埋", "穏", "傷", "負", "奴", "前", "仏", "頂", "面", "銀", "髪", "野", "郎", "同", "俺", "細"
,"菌", "系", "複", "雑", "怪", "供", "給", "替", "槽", "Ⅰ", "Ⅱ", "Ⅲ", "戻", "制", "高", "顕", "微", "鏡"
,"胞", "協", "殺", "禁", "奥", "子", "眠", "家", "族", "暖", "炉", "明", "掃", "除", "酒", "転", "助", "気"
,"差", "支", "我", "雇", "存", "在", "群", "隊", "収", "集", "減", "信", "図", "印", "脱", "突", "抜", "飛"
,"橋", "危", "柵", "登", "爆", "早", "噴", "途", "御", "薪", "終", "了", "件", "撤", "繰", "返", "崩", "月"
,"参", "照", "棚", "燃", "風", "吹", "総"
        };

        /// <summary>
        /// 生化危机2字库6
        /// </summary>
        private string[] jpFontCharsEfF05 = { 
 "週", "誌", "簿", "雑", "然", "積", "夜", "明", "街", "跡", "吹", "飛", "当", "情", "間", "置", "制", "御"
,"建", "供", "給", "替", "読", "頑", "丈", "扉", "閉", "働", "除", "確", "認", "異", "臭", "野", "郎", "気"
,"満", "寄", "方", "良", "止", "駆", "際", "退", "去", "徹", "底", "人", "逃", "他", "達", "交", "渉", "次"
,"第", "私", "関", "係", "君", "雇", "嫌", "亡", "酬", "額", "懐", "暖", "爪", "壁", "線", "途", "熱", "子"
,"剖", "放", "奇", "妙", "植", "散", "乱", "身", "薄", "汚", "白", "衣", "内", "始", "危", "険", "待", "避"
,"類", "話", "受", "信", "隊", "静", "横", "巨", "焼", "見", "済", "探", "誰", "非", "激", "息", "洋", "館"
,"実", "験", "走", "波", "注", "意", "経", "表", "紫", "照", "濁", "棄", "遮", "維", "忘", "距", "役", "立"
,"絶", "延", "攻", "超", "速", "脱", "悪", "名", "借", "別", "暵", "終", "覚", "悟", "泱", "由", "俺", "瞬"
,"収", "返", "前", "呼", "位", "絡", "法", "怪", "骸", "爆", "壊", "刺", "食", "荒", "完", "投", "輸", "送"
,"足", "荷", "過", "剰", "厳", "態", "再", "突", "抜", "降", "橋", "変", "差", "固", "悲", "伝", "致", "存"
,"統", "領", "邦", "会", "議", "減", "菌", "移", "件", "犠", "牲", "万", "予", "想", "落", "年", "代"
        };

        /// <summary>
        /// 生化危机2字库7
        /// </summary>
        private string[] jpFontCharsEb6 = { 
 "楽", "酬", "受", "君", "由"
        };

        /// <summary>
        /// 生化危机2字库8
        /// </summary>
        private string[] jpFontCharsEb7 = { 
 "諸", "君", "延", "目", "前", "敵", "減", "埋", "爆", "達", "次", "第", "我", "楽", "倒"
        };

        #endregion

        #region " 中文字库共通 "

        /// <summary>
        /// 生化危机2字库0x00--0xEA
        /// </summary>
        private string[] cnFontChars00Ee = { 
 "　", ".", "▷", "「", "」", "（", "）", "『", "』", "【", "】", "▿", "0", "1", "2", "3", "4", "5"
,"6", "7", "8", "9", "：", "、", "，", "”", "！", "？", "。", "A", "B", "C", "D", "E", "F", "G"
,"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y"
,"Z", "[", "╱", "]", "'", "一", "・", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"
,"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "里", "昂", "莱"
,"斯", "艾", "达", "主", "么", "之", "乔", "书", "了", "什", "件", "传", "住", "体", "作", "使", "保", "信"
,"候", "值", "像", "克", "全", "关", "养", "兽", "册", "写", "冲", "出", "击", "刀", "列", "别", "制", "刻"
,"剂", "剧", "力", "加", "动", "勃", "包", "化", "匙", "半", "单", "卡", "印", "厅", "厘", "反", "发", "取"
,"右", "合", "后", "吗", "启", "告", "员", "和", "品", "哪", "喷", "器", "▵", "回", "国", "图", "在", "场"
,"块", "型", "城", "培", "基", "堡", "塑", "塔", "士", "处", "备", "复", "大", "头", "好", "子", "孔", "字"
,"存", "宁", "安", "定", "宝", "实", "室", "察", "射", "小", "尔", "就", "局", "屉", "屋", "巡", "工", "左"
,"已", "市", "布", "带", "常", "库", "开", "式", "弓", "引", "弹", "强", "录", "形", "得", "徽", "心", "忘"
,"快", "急", "恢", "成", "战", "房", "所", "手", "才", "打", "扔", "把", "报", "抽", "拉", "拿", "换", "掉"
,"控", "插", "改", "救", "教", "文", "料", "东", "新", "方", "无", "日", "时", "下", "明", "是", "普", "有"
,"＆", "…", "朗", "本", "机", "束", "来", "板", "☓", "林", "枪", "柜", "柯", "格", "桃", "案", "档", "梅"
,"梯", "检", "棋", "榴", "模", "正", "武", "殊", "毒", "号", "水", "汉", "没", "治", "法", "泵", "洗", "活"
        };

        /// <summary>
        /// 生化危机2字库0x00--0xEA
        /// </summary>
        private string[] cnFontChars00EeNew = { 
 "　", ".", "▷", "「", "」", "（", "）", "『", "』", "【", "】", "▿", "0", "1", "2", "3", "4", "5"
,"6", "7", "8", "9", "：", "、", "，", "”", "！", "？", "。", "A", "B", "C", "D", "E", "F", "G"
,"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y"
,"Z", "[", "╱", "]", "'", "一", "・", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"
,"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "里", "昂", "莱"
,"斯", "艾", "达", "主", "么", "之", "乔", "书", "了", "什", "件", "传", "住", "体", "作", "使", "保", "信"
,"候", "值", "像", "克", "全", "关", "养", "兽", "册", "写", "冲", "出", "击", "刀", "列", "别", "制", "刻"
,"剂", "剧", "力", "加", "动", "勃", "包", "化", "匙", "半", "单", "卡", "印", "厅", "厘", "反", "发", "取"
,"右", "合", "后", "吗", "启", "告", "员", "和", "品", "哪", "喷", "器", "▵", "回", "国", "图", "在", "场"
,"块", "型", "城", "培", "基", "堡", "塑", "塔", "士", "处", "备", "复", "大", "头", "好", "子", "孔", "字"
,"存", "宁", "安", "定", "宝", "实", "室", "察", "射", "小", "尔", "就", "局", "屉", "屋", "巡", "工", "左"
,"已", "市", "布", "带", "常", "库", "开", "式", "弓", "引", "弹", "强", "录", "形", "得", "徽", "心", "忘"
,"快", "急", "恢", "成", "战", "房", "所", "手", "才", "打", "扔", "把", "报", "抽", "拉", "拿", "换", "掉"
,"控", "插", "改", "救", "教", "文", "料", "东", "新", "方", "无", "日", "时", "下", "明", "是", "普", "有"
,"海", "…", "朗", "本", "机", "束", "来", "板", "麦", "林", "枪", "柜", "柯", "格", "桃", "案", "档", "梅"
,"梯", "检", "棋", "榴", "模", "正", "武", "殊", "毒", "号", "水", "汉", "没", "治", "法", "泵", "洗", "活"
        };

        #endregion

        #region " 中文字库A "

        /// <summary>
        /// 生化危机2字库0xEfF0
        /// </summary>
        private string[] cnFontCharsEfF0_A = { 
         "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
        ,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
        ,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
        ,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
        ,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
        ,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
        ,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
        ,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
        ,"麦", "黑", "齿", "一", "丧", "为", "举", "也", "事", "于", "些", "人", "以", "们", "会", "但", "你", "停"
        ,"光", "入", "公", "军", "冠", "净", "凝", "分", "切", "刚", "到", "办", "升", "危", "去", "友", "口", "只"
        ,"可", "台", "司", "各", "君", "吧", "味", "哥", "四", "地", "坏", "坠", "堆", "堵", "够", "奖", "女", "她"
        ,"孩", "对", "寻", "将", "少", "尸", "干", "当", "很", "德", "必", "怎", "性", "恩", "情", "我", "找", "担"
        ,"拳", "持", "按", "接", "放", "整", "暴", "更", "月", "术", "条", "杯", "架", "标", "样", "桌", "楼", "死"
        ,"毁", "气", "油", "洁", "浮", "清", "源", "灵", "瑞", "瓶", "男", "画", "留", "白", "直", "相", "看", "知"
        ,"破", "祈", "神", "祷", "离", "移", "穿", "竞", "箱", "籍", "类", "紧", "纯", "纸", "经", "络", "联", "菲"
        ,"裂", "视", "讯", "设", "话", "谁", "资", "赛", "起", "跑", "过", "映", "还", "进", "那", "都", "释", "铜"
        ,"铠", "绣", "闭", "间", "闸", "闻", "阀", "随", "难", "雕", "风", "魂"
                };

        /// <summary>
        /// 生化危机2字库3
        /// </summary>
        private string[] cnFontCharsEfF02_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丧", "为", "也", "事", "些", "亡", "人", "今", "他", "以", "们", "会", "但", "低"
,"你", "供", "做", "停", "光", "公", "其", "切", "到", "前", "办", "勒", "勿", "压", "原", "去", "友", "叫"
,"可", "司", "吧", "周", "命", "哈", "哗", "喧", "围", "圣", "地", "坏", "埋", "墅", "声", "外", "多", "天"
,"奖", "对", "封", "尸", "帮", "应", "张", "影", "往", "待", "志", "怎", "想", "憾", "我", "户", "托", "找"
,"拜", "按", "振", "接", "推", "撞", "操", "放", "数", "断", "旧", "星", "景", "暖", "月", "服", "期", "杯"
,"果", "查", "标", "死", "永", "汇", "泉", "派", "流", "浴", "淌", "清", "源", "灵", "炉", "烈", "然", "牲"
,"狱", "猎", "由", "男", "画", "疼", "痛", "皇", "相", "看", "眼", "知", "短", "神", "祭", "空", "穿", "窗"
,"纸", "经", "置", "耀", "考", "而", "背", "脑", "节", "芒", "葬", "血", "衣", "袭", "议", "许", "话", "该"
,"说", "谁", "资", "起", "足", "路", "边", "过", "还", "迦", "遗", "那", "都", "镜", "闻", "随", "障", "马"
,"骨", "骸", "高"
        };

        /// <summary>
        /// 生化危机2字库4
        /// </summary>
        private string[] cnFontCharsEfF03_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "三", "丧", "也", "乱", "事", "互", "些", "人", "介", "从", "他", "以", "们", "任"
,"会", "但", "你", "做", "停", "先", "入", "公", "其", "内", "分", "刚", "到", "前", "办", "务", "升", "厂"
,"去", "友", "口", "只", "叫", "可", "司", "吓", "吧", "听", "呢", "味", "哥", "啊", "地", "堵", "外", "太"
,"奇", "女", "孩", "它", "完", "对", "少", "尸", "尽", "居", "住", "很", "必", "怎", "怕", "怪", "息", "恶"
,"情", "想", "愚", "我", "托", "找", "护", "抬", "拜", "按", "振", "排", "接", "撕", "操", "放", "施", "月"
,"朋", "杀", "杆", "标", "样", "止", "死", "气", "氯", "泳", "洞", "游", "滤", "烷", "然", "爬", "狗", "甲"
,"男", "痛", "白", "目", "直", "相", "看", "睡", "知", "破", "禁", "福", "算", "系", "绍", "经", "而", "肩"
,"胸", "膀", "芝", "蠢", "血", "裂", "觉", "诉", "话", "说", "谁", "贮", "走", "起", "跑", "路", "边", "过"
,"还", "进", "那", "都", "配", "锯", "闸", "闻", "队", "阿", "难", "预", "风", "马"
        };

        /// <summary>
        /// 生化危机2字库5
        /// </summary>
        private string[] cnFontCharsEfF04_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丈", "丧", "为", "事", "于", "些", "产", "人", "从", "仓", "他", "代", "令", "以"
,"任", "会", "伤", "何", "你", "修", "停", "入", "其", "具", "况", "刚", "创", "利", "到", "功", "危", "压"
,"去", "又", "友", "变", "口", "只", "叫", "可", "吊", "名", "吧", "听", "周", "哥", "因", "围", "地", "圾"
,"垃", "堵", "塌", "多", "夫", "失", "女", "她", "妮", "威", "完", "害", "尸", "崩", "嵌", "帕", "帮", "底"
,"廉", "弄", "往", "很", "必", "忆", "怎", "性", "怪", "情", "想", "我", "扇", "扩", "抢", "拆", "按", "排"
,"接", "握", "撒", "放", "散", "旋", "旧", "早", "昏", "更", "替", "最", "杀", "条", "枚", "标", "样", "桥"
,"欠", "止", "死", "比", "气", "油", "流", "混", "清", "源", "灯", "瓶", "由", "男", "疗", "痕", "目", "看"
,"知", "礼", "移", "类", "糕", "糟", "系", "紧", "繁", "经", "缆", "置", "而", "胎", "胚", "脱", "节", "芝"
,"莫", "落", "蛋", "血", "衍", "见", "计", "认", "让", "说", "谁", "谎", "质", "走", "起", "过", "还", "进"
,"迹", "追", "送", "造", "那", "都", "量", "链", "闸", "难", "震", "项", "须", "风", "马", "高", "鼠"
        };

        /// <summary>
        /// 生化危机2字库6
        /// </summary>
        private string[] cnFontCharsEfF05_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "也", "于", "些", "亮", "人", "们", "休", "会", "但", "你", "做", "停", "光", "入"
,"内", "到", "升", "危", "去", "口", "只", "可", "台", "号", "吧", "啊", "地", "墙", "女", "密", "将", "应"
,"很", "态", "怎", "息", "意", "我", "护", "担", "按", "擅", "操", "昏", "最", "止", "死", "注", "洞", "灯"
,"热", "然", "看", "离", "程", "立", "答", "紧", "累", "终", "经", "缆", "置", "藏", "虽", "表", "视", "话"
,"该", "说", "资", "赘", "走", "起", "载", "过", "近", "还", "进", "逃", "那", "都", "醒", "间", "降", "隐"
        };

        /// <summary>
        /// 生化危机2字库7
        /// </summary>
        private string[] cnFontCharsEfF06_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丈", "业", "丢", "临", "为", "久", "也", "事", "于", "些", "交", "产", "人", "从"
,"他", "以", "们", "任", "休", "会", "伴", "但", "低", "何", "你", "供", "倒", "做", "停", "先", "入", "公"
,"其", "内", "净", "分", "利", "到", "前", "升", "危", "去", "口", "另", "只", "可", "台", "司", "各", "同"
,"名", "吧", "听", "呢", "啊", "由", "因", "地", "坏", "增", "天", "太", "夫", "夺", "女", "她", "始", "完"
,"对", "封", "尸", "层", "巨", "干", "床", "应", "往", "很", "忙", "怎", "怕", "思", "总", "息", "情", "想"
,"意", "我", "户", "托", "护", "拜", "指", "按", "据", "接", "提", "撕", "操", "放", "故", "效", "敢", "数"
,"整", "晚", "最", "月", "某", "样", "核", "植", "止", "死", "毕", "气", "永", "油", "洒", "派", "涯", "温"
,"源", "灯", "炉", "炼", "热", "然", "爱", "牢", "白", "盗", "看", "睡", "知", "破", "离", "积", "竟", "系"
,"紧", "累", "纹", "组", "织", "经", "统", "缓", "置", "脑", "腹", "蛋", "表", "认", "说", "谍", "资", "赘"
,"走", "起", "输", "边", "过", "近", "还", "逃", "速", "遗", "那", "都", "醒", "闭", "间", "闸", "将", "马"
        };

        /// <summary>
        /// 生化危机2字库8
        /// </summary>
        private string[] cnFontCharsEfF07_A = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "为", "也", "事", "于", "以", "仪", "休", "伙", "会", "伴", "但", "你", "供", "停"
,"入", "内", "况", "分", "到", "危", "即", "受", "可", "各", "同", "吧", "堆", "始", "家", "将", "应", "必"
,"怎", "息", "情", "戏", "按", "挡", "排", "操", "擎", "放", "施", "暂", "更", "杆", "材", "样", "止", "泄"
,"游", "源", "漏", "由", "知", "积", "稳", "紧", "经", "置", "计", "让", "设", "足", "过", "返", "还", "进"
,"遇", "那", "量", "间", "隧", "须", "马", "高"
        };

        #endregion

        #region " 中文字库B "

        /// <summary>
        /// 生化危机2字库0xEfF0
        /// </summary>
        private string[] cnFontCharsEfF0_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丧", "为", "举", "也", "事", "于", "些", "人", "他", "以", "们", "会", "但", "你"
,"停", "光", "入", "公", "军", "冠", "净", "凝", "分", "切", "刚", "到", "办", "升", "危", "去", "友", "口"
,"只", "可", "台", "司", "各", "君", "吧", "呢", "味", "哥", "四", "地", "坏", "坠", "堆", "堵", "外", "够"
,"奖", "女", "她", "妈", "孩", "家", "对", "寻", "将", "少", "尸", "干", "当", "很", "德", "必", "怎", "怕"
,"性", "怪", "恩", "情", "我", "找", "担", "拳", "持", "按", "接", "放", "整", "暴", "更", "月", "术", "条"
,"杯", "架", "标", "样", "桌", "楼", "死", "毁", "比", "气", "油", "洁", "浮", "清", "源", "灵", "爸", "瑞"
,"瓶", "男", "画", "留", "白", "直", "相", "看", "知", "破", "祈", "神", "祷", "离", "移", "穿", "竞", "箱"
,"籍", "类", "紧", "纯", "纸", "经", "络", "联", "菲", "裂", "视", "让", "讯", "设", "话", "说", "谁", "资"
,"赛", "起", "跑", "路", "躲", "过", "迎", "还", "进", "那", "都", "释", "铜", "铠", "绣", "闭", "间", "闸"
,"闻", "阀", "随", "难", "雕", "风", "魂", "走", "许"
        };

        /// <summary>
        /// 生化危机2字库3
        /// </summary>
        private string[] cnFontCharsEfF02_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丧", "为", "也", "事", "些", "亡", "亲", "人", "今", "从", "他", "以", "们", "会"
,"但", "低", "你", "供", "做", "停", "儿", "光", "公", "其", "切", "到", "前", "办", "勒", "勿", "升", "压"
,"原", "去", "可", "司", "吉", "吧", "听", "呢", "周", "命", "哗", "哥", "啊", "喧", "围", "圣", "地", "坏"
,"埋", "堵", "墅", "声", "外", "多", "天", "奖", "女", "她", "孩", "对", "封", "尸", "居", "巴", "应", "张"
,"影", "待", "德", "志", "怎", "恩", "想", "憾", "我", "户", "托", "找", "护", "担", "拜", "按", "挖", "接"
,"推", "撞", "操", "放", "数", "断", "旧", "暖", "月", "服", "期", "杯", "果", "查", "标", "止", "死", "永"
,"汇", "泉", "流", "浴", "淌", "清", "源", "灵", "炉", "烈", "然", "父", "牲", "狱", "猎", "男", "画", "疼"
,"痛", "皇", "直", "相", "看", "眼", "知", "短", "神", "祭", "穿", "窗", "类", "系", "纸", "经", "置", "耀"
,"考", "而", "联", "背", "脑", "节", "芒", "菲", "葬", "血", "衣", "袭", "议", "话", "该", "说", "谁", "资"
,"起", "足", "跟", "路", "边", "过", "还", "迦", "遗", "那", "都", "镜", "闻", "随", "障", "马", "骸", "高"
        };

        /// <summary>
        /// 生化危机2字库4
        /// </summary>
        private string[] cnFontCharsEfF03_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "三", "为", "丽", "也", "乱", "事", "于", "些", "人", "从", "他", "以", "们", "任"
,"会", "但", "你", "促", "停", "儿", "先", "入", "其", "内", "再", "冷", "到", "前", "办", "务", "助", "去"
,"口", "只", "叫", "可", "名", "吧", "听", "呢", "味", "呵", "啊", "嘴", "团", "地", "奇", "女", "威", "它"
,"完", "家", "对", "尽", "己", "希", "帕", "帮", "度", "廉", "当", "往", "待", "很", "必", "态", "怎", "怕"
,"怪", "恩", "情", "想", "我", "找", "担", "按", "排", "撕", "操", "攻", "放", "施", "暗", "更", "望", "杆"
,"杰", "标", "样", "根", "止", "死", "毁", "比", "气", "氯", "洞", "滤", "烷", "然", "爸", "狗", "甲", "痛"
,"白", "相", "知", "破", "禁", "福", "离", "类", "终", "经", "继", "续", "而", "肩", "胸", "膀", "血", "裂"
,"诉", "说", "谁", "谢", "贮", "走", "起", "跑", "路", "边", "过", "近", "还", "进", "那", "都", "锯", "闭"
,"闸", "闻", "队", "阻", "阿", "附", "难", "静", "顾", "预", "风", "马"
        };

        /// <summary>
        /// 生化危机2字库5
        /// </summary>
        private string[] cnFontCharsEfF04_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丈", "为", "也", "事", "于", "些", "交", "产", "人", "仅", "从", "仓", "他", "代"
,"以", "们", "优", "伙", "会", "你", "修", "停", "儿", "先", "入", "具", "况", "刚", "利", "到", "前", "危"
,"压", "去", "变", "口", "只", "叫", "可", "吊", "名", "吧", "听", "周", "啊", "嘛", "因", "围", "固", "地"
,"垃", "圾", "堵", "塌", "多", "太", "夫", "失", "女", "她", "如", "妈", "妮", "威", "完", "家", "宿", "对"
,"尸", "崩", "嵌", "帮", "干", "廉", "当", "往", "很", "必", "忆", "怎", "思", "性", "怪", "情", "想", "意"
,"我", "扇", "扩", "找", "担", "拆", "按", "排", "接", "放", "散", "旋", "旧", "晕", "晚", "杀", "枚", "果"
,"标", "样", "桥", "止", "死", "气", "求", "油", "流", "清", "源", "灯", "烦", "然", "狱", "瓶", "由", "痕"
,"痛", "目", "相", "看", "知", "秀", "移", "类", "系", "紧", "经", "绝", "缆", "置", "肚", "胎", "胚", "脱"
,"节", "落", "虽", "血", "计", "认", "诉", "话", "说", "谁", "谍", "质", "走", "起", "踪", "过", "近", "还"
,"进", "迹", "追", "造", "遇", "那", "都", "量", "间", "闸", "震", "靠", "须", "顽", "风", "高", "麻", "鼠"
        };

        /// <summary>
        /// 生化危机2字库6
        /// </summary>
        private string[] cnFontCharsEfF05_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "也", "亮", "人", "从", "会", "你", "停", "光", "入", "内", "再", "到", "办", "升"
,"去", "口", "可", "台", "号", "呢", "哟", "啊", "喔", "地", "坚", "墙", "外", "如", "妈", "孤", "将", "态"
,"怎", "总", "恩", "想", "意", "我", "找", "护", "担", "持", "按", "振", "昏", "最", "果", "样", "止", "注"
,"洞", "灯", "热", "爸", "玩", "痛", "直", "看", "程", "立", "紧", "经", "缆", "置", "肚", "表", "视", "话"
,"谢", "赶", "载", "过", "近", "进", "送", "那", "间", "降", "陪", "们", "走", "吧", "相", "它", "事", "但"
        };

        /// <summary>
        /// 生化危机2字库7
        /// </summary>
        private string[] cnFontCharsEfF06_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "一", "丈", "业", "丢", "临", "也", "事", "于", "些", "交", "亲", "人", "从", "他", "代"
,"以", "们", "任", "份", "会", "但", "低", "何", "你", "供", "倒", "做", "停", "儿", "先", "入", "其", "内"
,"净", "分", "利", "到", "前", "升", "危", "原", "去", "口", "它", "可", "台", "各", "名", "吧", "呢", "啊"
,"地", "坏", "增", "夫", "女", "她", "妈", "妮", "始", "威", "孤", "完", "宿", "对", "封", "尸", "层", "巨"
,"干", "床", "应", "廉", "往", "很", "忙", "怎", "总", "情", "想", "意", "我", "户", "托", "找", "承", "抗"
,"护", "拜", "指", "按", "据", "撕", "操", "放", "效", "数", "整", "更", "最", "月", "杀", "标", "样", "核"
,"植", "止", "死", "母", "毕", "气", "油", "洒", "温", "源", "灯", "炉", "炼", "热", "爱", "爸", "牢", "玩"
,"由", "留", "目", "直", "看", "睡", "知", "破", "离", "积", "称", "笨", "系", "紧", "纹", "经", "统", "续"
,"缓", "置", "职", "脑", "腹", "蛋", "表", "认", "相", "识", "诉", "谅", "谢", "走", "信", "跑", "载", "输"
,"边", "过", "还", "送", "逃", "速", "遗", "那", "都", "醒", "链", "闭", "间", "闸", "降", "陪", "项", "马"
        };

        /// <summary>
        /// 生化危机2字库8
        /// </summary>
        private string[] cnFontCharsEfF07_B = { 
 "测", "浣", "海", "消", "满", "火", "炎", "炸", "点", "照", "熊", "燃", "爆", "片", "版", "物", "特", "状"
,"独", "狼", "王", "环", "现", "班", "理", "瓦", "生", "用", "电", "疫", "病", "登", "的", "监", "盒", "盖"
,"盘", "真", "着", "石", "研", "硫", "确", "磁", "种", "秘", "稍", "究", "章", "符", "第", "等", "简", "管"
,"箭", "篇", "米", "红", "约", "线", "结", "给", "绿", "编", "美", "翰", "老", "者", "胶", "能", "腐", "腰"
,"自", "色", "个", "花", "苗", "草", "药", "莉", "不", "蓝", "蛇", "行", "被", "装", "西", "要", "覆", "角"
,"解", "警", "记", "请", "读", "调", "豆", "象", "豹", "贝", "货", "跃", "跳", "身", "车", "转", "轮", "中"
,"运", "这", "连", "通", "逻", "道", "部", "酸", "上", "重", "金", "针", "钟", "钥", "钩", "铁", "锁", "锋"
,"错", "长", "门", "际", "除", "险", "雪", "零", "雷", "需", "霰", "非", "面", "顿", "颗", "验", "骑", "鹰"
,"麦", "黑", "齿", "为", "也", "事", "于", "以", "仪", "伙", "会", "伴", "但", "你", "供", "做", "停", "入"
,"内", "况", "准", "分", "到", "危", "即", "去", "可", "各", "同", "吧", "堆", "始", "家", "将", "应", "必"
,"怎", "情", "按", "挡", "排", "操", "擎", "放", "施", "暂", "更", "杂", "杆", "材", "样", "止", "死", "泄"
,"源", "漏", "由", "知", "碎", "积", "稳", "紧", "经", "置", "谁", "计", "让", "设", "足", "返", "还", "进"
,"遇", "那", "量", "间", "隧", "须", "高", "谁", "我"
        };

        #endregion

        #endregion

        /// <summary>
        /// 记录当前使用字库
        /// </summary>
        private Dictionary<int, string[]> jpFontCharPage = new Dictionary<int,string[]>();

        /// <summary>
        /// 记录当前使用的中文字库
        /// </summary>
        private Dictionary<int, string[]> cnFontCharPage = new Dictionary<int,string[]>();

        /// <summary>
        /// 全局变量
        /// </summary>
        private int maxFindLen = 0;

        /// <summary>
        /// 导入时未找到的字符集
        /// </summary>
        private Dictionary<string, string> impNotExist = new Dictionary<string, string>();

        #endregion

        /// <summary>
        /// 初始化
        /// </summary>
        public Bio2TextEditor()
        {
            InitializeComponent();

            this.ResetHeight();

            this.gameName = "Bio2";
            //this.baseFolder = @"E:\Study\Hanhua\TodoCn\Bio2";
            this.baseFolder = @"G:\Study\MySelfProject\Hanhua\TodoCn\HanhuaProject\Bio2";
            this.subDisk = "A";
            
            this.SetPsLoadStatus(false);

            // 初始化
            this.EditorInit(true);

            //this.baseFile = this.baseFolder + @"\Bio2NgcDol.xls";
            //SaveMovTxt();
            //string aa = GetDiffData("了启刻么艾");
        }

        public static string GetDiffData(string key)
        {
            //string page0 = string.Join(string.Empty, cnFontChars00Ee);
            string page0 = "ABCDEFGHIJKLMNOPQRST";
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < key.Length; i++)
            {
                string curChar = key.Substring(i, 1);
                sb.Append(page0.IndexOf(curChar).ToString("x") + " ");
            }

            return sb.ToString();
        }

        #region " 事件 "

        /// <summary>
        /// 切换类型
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rdoNgc_CheckedChanged(object sender, EventArgs e)
        {
            if (this.rdoNgc.Checked)
            {
                this.SetNgcLoadStatus(true);

                this.SetPsLoadStatus(false);
            }
            else
            {
                this.SetNgcLoadStatus(false);

                this.SetPsLoadStatus(true);
            }
        }

        /// <summary>
        /// CopyPs的文本到Ngc
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCopyFromPs_Click(object sender, EventArgs e)
        {
            //this.CheckComnCharsCount();
            this.CheckComnCharsCount6();
            //this.CheckComnCharsCount();
            //this.CheckCharsCount();
            //this.CheckFontChars();
            //this.subDisk = "A";
            //this.CopyPsToNgc();

            //this.subDisk = "B";
            //this.CopyPsToNgc();
            //this.GetPsNgcBinDiff();
            //this.SaveMovTxt();
            //this.SaveFileBin();

            //string[] rdtLines = File.ReadAllLines(this.baseFolder + @"\Bio2PsNgcRdtA_O.txt");
            //StringBuilder sb = new StringBuilder();
            //for (int i = 0; i < rdtLines.Length; i += 2)
            //{
            //    sb.Append(rdtLines[i] + "\r\n");
            //    string[] addrs = rdtLines[i + 1].Split(' ');
            //    sb.Append(addrs[0] + " " + addrs[1] + "\r\n");
            //}

            //File.WriteAllText(this.baseFolder + @"\Bio2PsNgcRdtA.txt", sb.ToString());

            //rdtLines = File.ReadAllLines(this.baseFolder + @"\Bio2PsNgcRdtB_O.txt");
            //sb = new StringBuilder();
            //for (int i = 0; i < rdtLines.Length; i += 2)
            //{
            //    sb.Append(rdtLines[i] + "\r\n");
            //    string[] addrs = rdtLines[i + 1].Split(' ');
            //    sb.Append(addrs[0] + " " + addrs[1] + "\r\n");
            //}

            //File.WriteAllText(this.baseFolder + @"\Bio2PsNgcRdtB.txt", sb.ToString());
        }

        #endregion

        #region " 重写父类方法 "

        /// <summary>
        /// 生成打包文件
        /// </summary>
        protected override void CreatePatch()
        {
            this.Do(this.CopyCnFiles);
        }

        /// <summary>
        /// 读取字库信息
        /// </summary>
        protected override void ReadFontChar()
        {
            // 读取日文字库
            this.ReadFontFile(this.jpFontCharPage, this.jpFontChars00Ee, this.jpFontCharsEfF0);

            // 读取中文字库
            //if ("A".Equals(this.subDisk))
            //{
            //    this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF0_A);
            //}
            //else
            //{
            //    this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF0_B);
            //}
        }

        /// <summary>
        /// 读取需要汉化的文件
        /// </summary>
        protected override void LoadAllFiles()
        {
            base.LoadAllFiles();

            // 根据配置文件，取得所有汉化的文件
            List<FilePosInfo> allFiles = this.LoadFiles();
            if (allFiles.Count == 0)
            {
                MessageBox.Show("路径错误，没有找到需要Copy的文件！");
                return;
            }

            // 添加Ngc start.dol文件
            if (this.chkNgcDol.Checked)
            {
                //string ngcStartDol = this.baseFolder + @"\Bio2NgcJp\root\leon.rel";
                string ngcStartDol = this.baseFolder + @"\helpPc\jp\bio2.exe";
                if ("B".Equals(this.subDisk))
                {
                    ngcStartDol = this.baseFolder + @"\Bio2NgcJp\root\claire.rel";
                }
                allFiles.ForEach(p => this.AddFile(ngcStartDol, p));
            }
            else if (this.chkNgcRdt.Checked)
            {
                string filePath = this.baseFolder + @"\Bio2NgcJp\root\Pl0\Rdt\";
                if ("B".Equals(this.subDisk))
                {
                    filePath = this.baseFolder + @"\Bio2NgcJp\root\Pl1\Rdt\";
                }
                allFiles.ForEach(p => this.AddFile(filePath + p.File, p));
            }

            // 添加Bin文件
            if (this.chkPsBin.Checked)
            {
                string jpFile = this.baseFolder + @"\Bio2PsJp\" + this.subDisk + @"\COMMON\BIN\MEM_CARD.BIN";
                allFiles.ForEach(p => this.AddFile(jpFile, p));
            }
        }

        /// <summary>
        /// 选择的文件变更
        /// </summary>
        /// <param name="currentFileInfo">当前选择的文件</param>
        protected override void FileChanged(FilePosInfo currentFileInfo)
        {
            // 修改字库
            string index = Util.GetShortFileName(currentFileInfo.File).Substring(4, 1);
            if ("01234567".IndexOf(index) > 0)
            {
                this.ResetFontChar("01234567".IndexOf(index));
            }
            else if ("0ABCDEFG".IndexOf(index) > 0)
            {
                this.ResetFontChar("0ABCDEFG".IndexOf(index));
            }
            else
            {
                this.ResetFontChar(1);
            }

            if (currentFileInfo.File.EndsWith(".rdt", StringComparison.OrdinalIgnoreCase))
            {
                byte[] byData = File.ReadAllBytes(currentFileInfo.File);
                int startPos = ((byData[0x3f] << 24) | (byData[0x3e] << 16) | (byData[0x3d] << 8) | byData[0x3c]);
                int endPos = (byData[0x43] << 24) | (byData[0x42] << 16) | (byData[0x41] << 8) | byData[0x40];
                currentFileInfo.TextStart = startPos + (byData[startPos + 1] << 8 | byData[startPos]);
                currentFileInfo.TextEnd = endPos;
                currentFileInfo.EntryPos = startPos;
                
                // 取得最后一句
                if (endPos == 0)
                {
                    int textEndPos = startPos + (byData[currentFileInfo.TextStart - 1] << 8 | byData[currentFileInfo.TextStart - 2]);
                    endPos = byData.Length;
                    while (textEndPos < endPos)
                    {
                        if (byData[textEndPos] == 0xF7)
                        {
                            textEndPos++;
                            break;
                        }

                        if (byData[textEndPos] == 0xFE)
                        {
                            textEndPos += 2;
                            break;
                        }

                        textEndPos++;
                    }
                    currentFileInfo.TextEnd = textEndPos;
                }
            }
        }

        /// <summary>
        /// 开始解码文本
        /// </summary>
        /// <param name="currentFileInfo">当前选择的文件</param>
        /// <param name="isCnTxt">是否是中文</param>
        /// <returns>解码的文本</returns>
        protected override string DecodeText(FilePosInfo currentFileInfo, bool isCnTxt)
        {
            if (isCnTxt)
            {
                return this.DecodeText(File.ReadAllBytes(this.cnFile), currentFileInfo, this.cnFontCharPage);
            }
            else
            {
                return this.DecodeText(File.ReadAllBytes(currentFileInfo.File), currentFileInfo, this.jpFontCharPage);
            }
        }

        /// <summary>
        /// 取得当前文字的编码
        /// </summary>
        /// <param name="currenChar">当前文字</param>
        /// <returns>当前文字的编码</returns>
        protected override byte[] EncodeChar(string currentChar)
        {
            if (this.chkNgcDol.Checked || this.chkNgcRdt.Checked)
            {
                // 在字库中查找
                foreach (int fontPage in this.cnFontCharPage.Keys)
                {
                    string[] pageFonts = this.cnFontCharPage[fontPage];
                    for (int i = 0; i < pageFonts.Length; i++)
                    {
                        if (currentChar == pageFonts[i])
                        {
                            if (fontPage == 0)
                            {
                                return new byte[] { (byte)i };
                            }
                            else
                            {
                                return new byte[] { (byte)fontPage, (byte)i };
                            }
                        }
                    }
                }
            }
            else
            {
                throw new Exception("PsBio2不能被保存");
            }

            throw new Exception("未查询到相应的中文字符 : " + currentChar);
            // 保存未找到的字符
            //string index = Util.GetShortFileName(this.currentFileInfo.File).Substring(4, 1);
            //if ("01234567".IndexOf(index) > 0 || "0ABCDEFG".IndexOf(index) > 0)
            //{
            //    string charKey = "01234567".IndexOf(index).ToString();
            //    if ("0ABCDEFG".IndexOf(index) > 0)
            //    {
            //        charKey = "0ABCDEFG".IndexOf(index).ToString();
            //    }

            //    if (!this.impNotExist.ContainsKey(charKey))
            //    {
            //        this.impNotExist.Add(charKey, currentChar);
            //    }
            //    else
            //    {
            //        string notExistsChar = this.impNotExist[charKey];
            //        if (notExistsChar.IndexOf(currentChar) < 0)
            //        {
            //            this.impNotExist[charKey] = notExistsChar + currentChar;
            //        }
            //    }
            //}
            //else
            //{
            //    string charKey = "1";
            //    if (!this.impNotExist.ContainsKey(charKey))
            //    {
            //        this.impNotExist.Add(charKey, currentChar);
            //    }
            //    else
            //    {
            //        string notExistsChar = this.impNotExist["1"];
            //        if (notExistsChar.IndexOf(currentChar) < 0)
            //        {
            //            this.impNotExist["1"] = notExistsChar + currentChar;
            //        }
            //    }
            //}

            //return new byte[] { 0 };
        }

        /// <summary>
        /// 重新设置Entry位置信息
        /// </summary>
        /// <param name="currentFileInfo">当前选择的文件</param>
        /// <param name="cnTxtLen">当前行中文文本字节长度</param>
        /// <param name="prevEntryPos">前一个Entry位置信息</param>
        /// <returns>当前Entry位置信息</returns>
        protected override int ResetEntryPosInfo(FilePosInfo currentFileInfo, int cnTxtLen, int prevEntryPos)
        {
            // 保存Entry的偏移
            int nextEntryPos = prevEntryPos + cnTxtLen;
            currentFileInfo.TextEntrys.Add(nextEntryPos);

            return nextEntryPos;
        }

        /// <summary>
        /// 重新设置带Entry信息的翻译后的数据
        /// </summary>
        /// <param name="currentFileInfo">当前选择的文件</param>
        /// <param name="byData">当前选择的文件的字节数据</param>
        /// <param name="cnBytes">翻译后的字节数据</param>
        /// <returns>带Entry信息的翻译后的数据</returns>
        protected override byte[] ResetCnDataWithEnrty(FilePosInfo currentFileInfo, byte[] byData, List<byte> cnBytes)
        {
            byte[] byCnData = new byte[currentFileInfo.TextEntrys.Count * 2 + cnBytes.Count];

            if (currentFileInfo.File.EndsWith(".rdt", StringComparison.OrdinalIgnoreCase))
            {
                // 带Entry的文本，先保存修改后的各个Entry
                currentFileInfo.TextEntrys[0] = currentFileInfo.TextEntrys.Count * 2;
                byCnData[0] = (byte)(currentFileInfo.TextEntrys[0] & 0xFF);
                byCnData[1] = (byte)((currentFileInfo.TextEntrys[0] >> 8) & 0xFF);
                for (int i = 1; i < currentFileInfo.TextEntrys.Count; i++)
                {
                    int entryPos = currentFileInfo.TextEntrys[0] + currentFileInfo.TextEntrys[i];
                    byCnData[i * 2] = (byte)(entryPos & 0xFF);
                    byCnData[i * 2 + 1] = (byte)((entryPos >> 8) & 0xFF);
                }

                // 再保存文本数据
                int entryStart = currentFileInfo.TextEntrys[0];
                Array.Copy(cnBytes.ToArray(), 0, byCnData, entryStart, cnBytes.Count);

                // 重新设置文本开始位置
                currentFileInfo.TextStart = currentFileInfo.EntryPos;
            }
            else
            {
                // 重新组织Pos信息
                int entryStart = currentFileInfo.TextEnd;
                int entryEnd = currentFileInfo.EntryPos;
                List<int> entryList = new List<int>();
                Dictionary<int, int> insertPosInfo = new Dictionary<int, int>();
                for (int i = entryStart; i < entryEnd; i += 2)
                {
                    entryList.Add(currentFileInfo.TextStart + Util.GetOffset(byData, i, i + 1));
                }

                int startPos;
                for (int i = 0; i < entryList.Count - 1; i++)
                {
                    startPos = entryList[i];
                    int endPos = entryList[i + 1];
                    if (endPos < startPos)
                    {
                        int tmp = i;
                        while (tmp >= 0)
                        {
                            if (endPos >= entryList[tmp])
                            {
                                insertPosInfo.Add(i + 1, tmp);
                                break;
                            }
                            tmp--;
                        }
                    }
                }

                // 带Entry的文本，先保存文本数据
                Array.Copy(cnBytes.ToArray(), 0, byCnData, 0, cnBytes.Count);

                // 再保存修改后的各个Entry
                int entryStartPos = cnBytes.Count;
                int posIdx = 0;
                for (int i = 0; i < currentFileInfo.TextEntrys.Count; i++)
                {
                    int entryPos = currentFileInfo.TextEntrys[i];
                    if (insertPosInfo.Count > 0 && insertPosInfo.ContainsKey(i))
                    {
                        int insertPos = currentFileInfo.TextEntrys[insertPosInfo[i]] + 2;
                        //int insertPos = 0;
                        byCnData[entryStartPos + posIdx * 2] = (byte)((insertPos >> 8) & 0xFF);
                        byCnData[entryStartPos + posIdx * 2 + 1] = (byte)(insertPos & 0xFF);
                    }
                    else
                    {
                        byCnData[entryStartPos + posIdx * 2] = (byte)((entryPos >> 8) & 0xFF);
                        byCnData[entryStartPos + posIdx * 2 + 1] = (byte)(entryPos & 0xFF);
                    }
                    posIdx++;
                }
            }

            return byCnData;
        }

        /// <summary>
        /// 检查输入的中文长度是否正确
        /// </summary>
        /// <param name="chkKeyWords">是否需要检查关键字</param>
        /// <returns>输入的中文长度是否正确</returns>
        protected override bool CheckCnText(bool chkKeyWords)
        {
            //return base.CheckCnText(false);
            return true;
        }

        /// <summary>
        /// 导出前的操作
        /// </summary>
        /// <returns>是否可以继续</returns>
        protected override bool BeforeExport()
        {
            string fileName = string.Empty;
            if (this.rdoNgc.Checked)
            {
                if (this.chkNgcDol.Checked)
                {
                    fileName = "Bio2NgcDol";
                }
            }
            else
            { 
                if (this.chkPsBin.Checked)
                {
                    fileName = "Bio2PsBin";
                }
            }

            this.baseFile = Util.SetSaveDailog(this.gameName + "翻译后文件（*.xls）|*.xls|所有文件|*.*", this.baseFolder + @"\" + fileName + ".xls");
            if (string.IsNullOrEmpty(this.baseFile))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 导入前判断
        /// </summary>
        /// <returns></returns>
        protected override bool BeforeImport()
        {
            this.baseFile = Util.SetOpenDailog(this.gameName + "翻译后文件（*.xls）|*.xls|所有文件|*.*", this.baseFolder + @"\.xls");
            if (string.IsNullOrEmpty(this.baseFile))
            {
                return false;
            }

            this.impNotExist.Clear();
            return true;
        }

        /// <summary>
        /// 导入完测试
        /// </summary>
        protected override void AfterImport()
        {
            this.impNotExist.Clear();
        }

        #endregion

        #region " 私有方法 "


        private void CreateTim()
        {
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(this.baseFolder + @"\filePic\TimBig\").Where(p => p.File.EndsWith(".tim", StringComparison.OrdinalIgnoreCase)).ToList();

            // 显示进度条
            this.ResetProcessBar(fileNameInfo.Count);

            foreach (FilePosInfo file in fileNameInfo)
            {
                //string imgFile = file.File.Replace(@"\filePic", @"\filePic\PsCnBig").Replace(".tim", ".png");
                //if (!File.Exists(imgFile))
                //{
                //    MessageBox.Show("图片文件不存在：" + imgFile);
                //    break;
                //}

                //this.CreateTim(file.File, new Bitmap(imgFile));
                byte[] byTim = File.ReadAllBytes(file.File);
                byTim[4] = 2;
                File.WriteAllBytes(file.File, byTim);
            }
        }

        private void CreateTim(string tmpTim, Bitmap impImg)
        {
            //string tmpTim = this.baseFolder + @"\filePic\TIT_BG.TIM";
            byte[] byTmpTim = File.ReadAllBytes(tmpTim);
            //Bitmap impImg = new Bitmap(this.baseFolder + @"\filePic\PsCnBig\file00_03.png");

            byte[] byNewTim = new byte[0x14 + (512 * 512 * 2)];
            Array.Copy(byTmpTim, 0, byNewTim, 0, 0x14);
            byNewTim[0x8] = 0x0c;
            byNewTim[0x9] = 0;
            byNewTim[0xa] = 8;
            byNewTim[0xb] = 0;

            byNewTim[0x10] = 0;
            byNewTim[0x11] = 0x2;
            byNewTim[0x12] = 0;
            byNewTim[0x13] = 0x2;

            byte[] byImgData = new byte[512 * 512 * 2];
            int byIndex = 0;
            for (int y = 0; y < impImg.Height; y++)
            {
                for (int x = 0; x < impImg.Width; x++)
                {
                    Color color = impImg.GetPixel(x, y);
                    int pixelColor = (Util.Convert8To5(color.B) << 10) | (Util.Convert8To5(color.G) << 5) | Util.Convert8To5(color.R);
                    byImgData[byIndex] = (byte)(pixelColor & 0xFF);
                    byImgData[byIndex + 1] = (byte)((pixelColor >> 8) & 0xFF);

                    byIndex += 2;
                }
            }

            Array.Copy(byImgData, 0, byNewTim, 0x14, byImgData.Length);

            File.WriteAllBytes(tmpTim.Replace(@"filePic\", @"filePic\TimBig\"), byNewTim);
        }

        private void ViewBackGroundImg()
        {
            System.Diagnostics.Process exep = new System.Diagnostics.Process();
            exep.StartInfo.FileName = @".\AdtDec.exe";
            exep.StartInfo.CreateNoWindow = true;
            exep.StartInfo.UseShellExecute = false;

            string bkImgFile = this.baseFolder + @"\Bio2NgcCn\root\common\bin\roomcut.bin";
            byte[] byBkImg = File.ReadAllBytes(bkImgFile);
            int imgStart = (byBkImg[3] << 24) | (byBkImg[2] << 16) | (byBkImg[1] << 8) | byBkImg[0];
            int startPos = imgStart;
            int imgIndex = 1;
            for (int i = 4; i < 10 * 4; i += 4)
            {
                int endPos = ((byBkImg[i + 3] << 24) | (byBkImg[i + 2] << 16) | (byBkImg[i + 1] << 8) | byBkImg[i]);
                byte[] byAdt = new byte[endPos - startPos];
                Array.Copy(byBkImg, startPos, byAdt, 0, byAdt.Length);

                string tempAdt = this.baseFolder + @"\BkImg\BkImg" + imgIndex.ToString().PadLeft(4, '0') + ".adt";
                File.WriteAllBytes(tempAdt, byAdt);

                exep.StartInfo.Arguments = tempAdt + " " + tempAdt.Replace(".adt", ".tim");
                exep.Start();
                exep.WaitForExit();

                startPos = endPos;
                imgIndex++;
            }
        }

        private void SaveMovTxt()
        {
            System.Diagnostics.Process exep = new System.Diagnostics.Process();
            exep.StartInfo.FileName = @".\AdtCom.exe";
            exep.StartInfo.CreateNoWindow = true;
            exep.StartInfo.UseShellExecute = false;

            string timFile = @"E:\游戏汉化\NgcBio2\Bio2NgcCn\root\common\Data\r704l.tim";
            string adtFile = @"E:\游戏汉化\NgcBio2\Bio2NgcCn\root\common\Data\r704l.adt";

            exep.StartInfo.Arguments = "e " + timFile + " " + adtFile;
            exep.Start();
            exep.WaitForExit();

            byte[] byAdt = File.ReadAllBytes(adtFile);
            byte[] newAdt = new byte[32740];
            Array.Copy(byAdt, 0, newAdt, 0, byAdt.Length);

            File.WriteAllBytes(adtFile, newAdt);

            //List<FilePosInfo> fileNameInfo = Util.GetAllFiles(this.baseFolder + @"\movTxt\allCn\").Where(p => p.File.EndsWith("r40x.tim", StringComparison.OrdinalIgnoreCase)).ToList();

            //// 显示进度条
            //this.ResetProcessBar(fileNameInfo.Count);

            //foreach (FilePosInfo file in fileNameInfo)
            //{
            //    exep.StartInfo.Arguments = "e " + file.File + " " + file.File.Replace(".tim", ".adt");
            //    exep.Start();
            //    exep.WaitForExit();

            //    // 更新进度条
            //    this.ProcessBarStep();
            //}

            //// 隐藏进度条
            //this.CloseProcessBar();
        }

        private void SaveFileBin()
        {
            System.Diagnostics.Process exep = new System.Diagnostics.Process();
            exep.StartInfo.FileName = @".\AdtCom.exe";
            exep.StartInfo.CreateNoWindow = true;
            exep.StartInfo.UseShellExecute = false;

            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(this.baseFolder + @"\binTxt\").Where(p => p.File.EndsWith(".tim", StringComparison.OrdinalIgnoreCase)).ToList();

            // 显示进度条
            this.ResetProcessBar(fileNameInfo.Count);

            for (int j = 0; j <= 0x18; j++)
            {
                byte[] byHeader = new byte[0x80];
                int headerPos = 4;
                string tempName = this.baseFolder + @"\binTxt\file" + j.ToString("x").PadLeft(2, '0');
                if (!File.Exists(tempName + ".bin"))
                {
                    continue;
                }

                List<byte> binFile = new List<byte>();
                List<FilePosInfo> files = fileNameInfo.Where(p => p.File.StartsWith(tempName, StringComparison.OrdinalIgnoreCase)).ToList();
                foreach (FilePosInfo file in files)
                {
                    string adtFile = file.File.Replace(".tim", ".adt");
                    exep.StartInfo.Arguments = "e " + file.File + " " + adtFile;
                    exep.Start();
                    exep.WaitForExit();

                    byte[] byAdts = File.ReadAllBytes(adtFile);
                    int adtLen = binFile.Count + byAdts.Length;
                    byHeader[headerPos] = (byte)(adtLen & 0xFF);
                    byHeader[headerPos + 1] = (byte)((adtLen >> 8) & 0xFF);
                    byHeader[headerPos + 2] = (byte)((adtLen >> 16) & 0xFF);
                    byHeader[headerPos + 3] = (byte)((adtLen >> 24) & 0xFF);

                    binFile.AddRange(byAdts.ToArray());
                    
                    headerPos += 4;
                }

                binFile.InsertRange(0, byHeader.ToArray());
                File.WriteAllBytes(tempName + ".bin", binFile.ToArray());

                // 更新进度条
                this.ProcessBarStep();
            }

            // 隐藏进度条
            this.CloseProcessBar();
        }

        private void SaveFilePic()
        {
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(this.baseFolder + @"\filePic\").Where(p => p.File.EndsWith(".tim", StringComparison.OrdinalIgnoreCase)).ToList();
            
            // 显示进度条
            this.ResetProcessBar(fileNameInfo.Count);
            ImgEditorTim timTool = new ImgEditorTim(this.baseFile);

            foreach (FilePosInfo file in fileNameInfo)
            {
                string imgFile = file.File.Replace(@"\filePic", @"\filePic\PsCn").Replace(".tim", ".png");
                if (!File.Exists(imgFile))
                {
                    MessageBox.Show("图片文件不存在：" + imgFile);
                    break;
                }

                byte[] byOldImg = File.ReadAllBytes(file.File);
                byte[] byNewImg = timTool.ConvertToTim(imgFile, Image.FromFile(imgFile), byOldImg);

                File.WriteAllBytes(file.File, byNewImg);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 隐藏进度条
            this.CloseProcessBar();
        }

        private void CheckFilePic()
        {
            System.Diagnostics.Process exep = new System.Diagnostics.Process();
            exep.StartInfo.FileName = @".\AdtDec.exe";
            exep.StartInfo.CreateNoWindow = true;
            exep.StartInfo.UseShellExecute = false;

            for (int j = 0; j <= 0x18; j++)
            {
                string memoFile = this.baseFolder + @"\binTxt\file" + j.ToString("x").PadLeft(2, '0');
                if (!File.Exists(memoFile + ".bin"))
                {
                    continue;
                }

                byte[] byMemo = File.ReadAllBytes(memoFile + ".bin");
                List<int> adtPos = new List<int>();
                for (int i = 0; i < 0x70; i += 4)
                {
                    if (i > 4 && byMemo[i] == 0 && byMemo[i + 1] == 0 && byMemo[i + 2] == 0 && byMemo[i + 3] == 0)
                    {
                        break;
                    }

                    adtPos.Add((byMemo[i] | (byMemo[i + 1] << 8) | (byMemo[i + 2] << 16) | (byMemo[i + 3] << 24)) + 0x80);
                }

                for (int i = 0; i < adtPos.Count - 1; i++)
                {
                    byte[] byTim = new byte[adtPos[i + 1] - adtPos[i]];
                    Array.Copy(byMemo, adtPos[i], byTim, 0, byTim.Length);

                    string tempAdt = this.baseFolder + @"\binTxt\file" + j.ToString("x").PadLeft(2, '0') + "_" + i.ToString().PadLeft(2, '0') + ".adt";
                    File.WriteAllBytes(tempAdt, byTim);

                    exep.StartInfo.Arguments = tempAdt + " " + tempAdt.Replace(".adt", ".tim");
                    exep.Start();
                    exep.WaitForExit();
                }
            }
        }

        private void CheckFontChars()
        {
            Microsoft.Office.Interop.Excel.Application xApp = null;
            Microsoft.Office.Interop.Excel.Workbook xBook = null;
            Microsoft.Office.Interop.Excel.Worksheet xSheet = null;

            try
            {
                Dictionary<string, string> chkFontChars = new Dictionary<string, string>();
                chkFontChars.Add("1", "");

                // 创建Application对象 
                xApp = new Microsoft.Office.Interop.Excel.ApplicationClass();

                // 得到WorkBook对象, 打开已有的文件 
                xBook = xApp.Workbooks._Open(
                    this.baseFile,
                    Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value);

                // 显示进度条
                this.ResetProcessBar(xBook.Sheets.Count);

                for (int i = xBook.Sheets.Count; i >= 1; i--)
                {
                    // 取得相应的Sheet
                    xSheet = (Microsoft.Office.Interop.Excel.Worksheet)xBook.Sheets[i];

                    // 取得当前Sheet的中文文本
                    int lineNum = 1;
                    int blankNum = 0;
                    StringBuilder sb = new StringBuilder();
                    while (blankNum < 4)
                    {
                        string cellValue = xSheet.get_Range("G" + lineNum, Missing.Value).Value2 as string;
                        sb.Append(cellValue).Append("\n");

                        if (string.IsNullOrEmpty(cellValue))
                        {
                            blankNum++;
                        }
                        else
                        {
                            blankNum = 0;
                        }

                        lineNum++;
                    }

                    sb = sb.Replace("\n", string.Empty);
                    string cnTxt = sb.ToString();
                    string index = xSheet.Name.Substring(4, 1);

                    for (int j = 0; j < cnTxt.Length - 1; j++)
                    {
                        string currentChar = cnTxt.Substring(j, 1);
                        if ("^" == currentChar)
                        {
                            // 关键字的解码
                            while (cnTxt.Substring(++j, 1) != "^")
                            {
                            }

                            continue;
                        }
                        else
                        {
                            //if ("01234567".IndexOf(index) > 0 || "0ABCDEFG".IndexOf(index) > 0)
                            //{
                            //    string charKey = "01234567".IndexOf(index).ToString();
                            //    if ("0ABCDEFG".IndexOf(index) > 0)
                            //    {
                            //        charKey = "0ABCDEFG".IndexOf(index).ToString();
                            //    }

                            //    if (!chkFontChars.ContainsKey(charKey))
                            //    {
                            //        chkFontChars.Add(charKey, currentChar);
                            //    }
                            //    else
                            //    {
                            //        string notExistsChar = chkFontChars[charKey];
                            //        if (notExistsChar.IndexOf(currentChar) < 0)
                            //        {
                            //            chkFontChars[charKey] = notExistsChar + currentChar;
                            //        }
                            //    }
                            //}
                            //if ("4".IndexOf(index) >= 0 || "D".IndexOf(index) >= 0)
                            //{
                            //    if (chkFontChars.ContainsKey(currentChar))
                            //    {
                            //        chkFontChars[currentChar] += 1;
                            //    }
                            //    else
                            //    {
                            //        chkFontChars.Add(currentChar, 1);
                            //    }
                            //}
                            string notExistsChar = chkFontChars["1"];
                            if (notExistsChar.IndexOf(currentChar) < 0)
                            {
                                chkFontChars["1"] = notExistsChar + currentChar;
                            }
                        }
                    }

                    // 更新进度条
                    this.ProcessBarStep();
                }

                // 隐藏进度条
                this.CloseProcessBar();

                int pos = 0;
                //List<int> pageCharCount = new List<int>();
                //string[] pageChars = new string[chkFontChars.Count * 2];
                //foreach (string pageKey in chkFontChars.Keys)
                //{
                //    //pageCharCount.Add(chkFontChars[pageKey].Length);

                //    pageChars[pos++] = pageKey + " " + chkFontChars[pageKey].Length;
                //    pageChars[pos++] = chkFontChars[pageKey];
                //}

                string[] pageChars = new string[2];
                pageChars[1] = chkFontChars["1"];
                pageChars[0] = pageChars[1].Length.ToString();
                //chkFontChars = chkFontChars.OrderBy(p => p.Value).ToDictionary(p => p.Key, p => p.Value);
                //List<string> charChk = new List<string>();
                //foreach (string key in chkFontChars.Keys)
                //{
                //    charChk.Add(key + chkFontChars[key]);
                //}
                File.WriteAllLines(this.baseFile + @".txt", pageChars, Encoding.UTF8);
                //File.WriteAllLines(this.baseFolder + @"\Bio2RdtPage4CharCount.txt", charChk.ToArray(), Encoding.UTF8);

            }
            catch (Exception me)
            {
                MessageBox.Show(this.baseFile + "\n" + me.Message);
            }
            finally
            {
                // 隐藏进度条
                this.CloseProcessBar();

                // 清空各种对象
                xSheet = null;
                xBook = null;
                if (xApp != null)
                {
                    xApp.Quit();
                    xApp = null;
                }
            }
        }

        private void CheckCharsCount()
        {
            string[] aTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtAOld.txt");
            string[] bTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtBOld.txt");

            string[] aAndBTxt = new string[aTxt.Length];
            for (int i = 0; i < aAndBTxt.Length; i += 2)
            {
                string cnATxt = aTxt[i + 1];
                string cnBTxt = bTxt[i + 1];
                StringBuilder sb = new StringBuilder();
                sb.Append(cnATxt);

                for (int j = 0; j < cnBTxt.Length; j++)
                {
                    string bChar = cnBTxt.Substring(j, 1);
                    if (!cnATxt.Contains(bChar))
                    {
                        sb.Append(bChar);
                    }
                }

                aAndBTxt[i + 1] = sb.ToString();
                aAndBTxt[i] = aAndBTxt[i + 1].Length.ToString();
            }

            File.WriteAllLines(this.baseFolder + @"\Bio2RdtABPageCharOld.txt", aAndBTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount()
        {
            //string page0Char = File.ReadAllText(this.baseFolder + @"\Bio2Page0Char.txt");
            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtABPageCharOld.txt");
            string[] cnNewTxt = new string[cnTxt.Length];
            for (int i = 0; i < cnTxt.Length; i += 2)
            {
                string lineTxt = cnTxt[i + 1];
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < lineTxt.Length; j++)
                {
                    string bChar = lineTxt.Substring(j, 1).Trim();
                    if (!string.IsNullOrEmpty(bChar) && !this.cnFontChars00EeNew.Contains(bChar))
                    {
                        sb.Append(bChar);
                    }
                }

                cnNewTxt[i + 1] = sb.ToString();
                cnNewTxt[i] = cnNewTxt[i + 1].Length.ToString();
            }

            File.WriteAllLines(this.baseFolder + @"\Bio2RdtABPageCharNew.txt", cnNewTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount2()
        {
            string comTxt = File.ReadAllLines(this.baseFolder + @"\Bio2NgcDolNew.txt")[1];

            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtABPageCharNew.txt");
            string[] cnNewTxt = new string[cnTxt.Length];
            for (int i = 0; i < cnTxt.Length; i += 2)
            {
                string lineTxt = cnTxt[i + 1];
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < lineTxt.Length; j++)
                {
                    string bChar = lineTxt.Substring(j, 1).Trim();
                    if (!comTxt.Contains(bChar))
                    {
                        sb.Append(bChar);
                    }
                }

                cnNewTxt[i + 1] = sb.ToString();
                cnNewTxt[i] = cnNewTxt[i + 1].Length.ToString();
            }

            File.WriteAllLines(this.baseFolder + @"\Bio2RdtABPageCharNew2.txt", cnNewTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount3()
        {
            string abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            string comTxt = File.ReadAllLines(this.baseFolder + @"\Bio2NgcDolOld.txt")[1];
            string usedComTxt = abc;
            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtABPageCharOld.txt");
            for (int k = 0; k < abc.Length; k++)
            {
                string curChar = abc.Substring(k, 1);
                if (comTxt.Contains(curChar))
                {
                    usedComTxt = usedComTxt.Replace(curChar, "");
                    continue;
                }

                for (int i = 0; i < cnTxt.Length; i += 2)
                {
                    string lineTxt = cnTxt[i + 1];
                    if (lineTxt.Contains(curChar))
                    {
                        usedComTxt = usedComTxt.Replace(curChar, "");
                        break;
                    }
                }
            }

            File.WriteAllText(this.baseFolder + @"\Bio2EmptyABCChar.txt", usedComTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount4()
        {
            string usedComTxt = string.Empty;
            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtChkCom.txt");
            for (int i = 0; i < cnTxt.Length; i += 2)
            {
                string lineTxt = cnTxt[i + 1];
                for (int j = 0; j < lineTxt.Length; j++)
                {
                    string bChar = lineTxt.Substring(j, 1).Trim();
                    bool isCom = true;
                    for (int k = 0; k < cnTxt.Length; k += 2)
                    {
                        if (k == i)
                        {
                            continue;
                        }

                        if (!cnTxt[k + 1].Contains(bChar))
                        {
                            isCom = false;
                            break;
                        }
                    }

                    if (isCom && !string.IsNullOrEmpty(bChar) && !this.cnFontChars00EeNew.Contains(bChar) && !usedComTxt.Contains(bChar))
                    {
                        usedComTxt += bChar;
                    }
                }
            }

            File.WriteAllText(this.baseFolder + @"\Bio2RdtABPageCharCom.txt", usedComTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount5()
        {
            string unUsedComTxt = File.ReadAllText(this.baseFolder + @"\Bio2RdtEmptyChar.txt");
            string canComTxt = File.ReadAllText(this.baseFolder + @"\Bio2RdtNeedComChar.txt");
            int unUsedComIndex = 0;
            int canComIndex = 0;

            for (int i = 0; i < this.cnFontChars00EeNew.Length; i++)
            {
                if (unUsedComIndex < unUsedComTxt.Length && this.cnFontChars00EeNew[i].Equals(unUsedComTxt.Substring(unUsedComIndex, 1))
                    && canComIndex < canComTxt.Length)
                {
                    this.cnFontChars00EeNew[i] = canComTxt.Substring(canComIndex, 1);
                    unUsedComIndex++;
                    canComIndex++;
                }
            }

            File.WriteAllText(this.baseFolder + @"\Bio2Page0Char.txt", string.Join("", this.cnFontChars00EeNew), Encoding.UTF8);
        }

        private void CheckComnCharsCount6()
        {
            //string page0Chars = File.ReadAllText(this.baseFolder + @"\font\UsedCom.txt");
            //string comTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtComPageChar.txt")[1];
            //string newComTxt = comTxt.Replace(" ", string.Empty).Replace("　", string.Empty);
            //string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtABPageChar.txt");

            //for (int i = 0; i < comTxt.Length; i++)
            //{
            //    string curChar = comTxt.Substring(i, 1).Trim();
            //    if (string.IsNullOrEmpty(curChar))
            //    {
            //        continue;
            //    }

            //    if (!page0Chars.Contains(curChar))
            //    {
            //        if (page0Chars.Length < 288)
            //        {
            //            page0Chars += curChar;
            //            newComTxt = newComTxt.Replace(curChar, string.Empty);
            //        }
            //    }
            //    else
            //    {
            //        newComTxt = newComTxt.Replace(curChar, string.Empty);
            //    }
            //}

            File.WriteAllText(this.baseFolder + @"\font\Page0Chars.txt", string.Join("", this.cnFontChars00EeNew), Encoding.UTF8);
            //string[] comChars = new string[2];
            //comChars[0] = newComTxt.Length.ToString();
            //comChars[1] = newComTxt;
            //File.WriteAllLines(this.baseFolder + @"\font\PageComn.txt", comChars, Encoding.UTF8);

            string allCom = File.ReadAllLines(this.baseFolder + @"\Bio2NgcDolNew.txt")[1];
            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\Bio2RdtABPageCharNew2.txt");
            string[] cnNewTxt = new string[cnTxt.Length];
            for (int i = 0; i < cnTxt.Length; i += 2)
            {
                string lineTxt = cnTxt[i + 1];

                cnNewTxt[i + 1] = allCom + lineTxt;
                cnNewTxt[i] = cnNewTxt[i + 1].Length.ToString();
            }

            File.WriteAllLines(this.baseFolder + @"\font\Page1To7Chars.txt", cnNewTxt, Encoding.UTF8);
        }

        private void CheckComnCharsCount7()
        {
            string chkCom = File.ReadAllText(this.baseFolder + @"\Bio2RdtABPageCharCom.txt");
            string comCnTxt = File.ReadAllText(this.baseFolder + @"\Bio2NgcDolOld.txt");
            int index = 0;
            for (int i = 0; i < this.cnFontChars00EeNew.Length; i++)
            {
                if ("".Equals(this.cnFontChars00EeNew[i]))
                {
                    string cunChar = comCnTxt.Substring(index, 1).Trim();
                    while (index < comCnTxt.Length &&
                        (string.IsNullOrEmpty(cunChar) || this.cnFontChars00EeNew.Contains(cunChar) || chkCom.Contains(cunChar)))
                    {
                        index++;
                        cunChar = comCnTxt.Substring(index, 1).Trim();
                    }

                    this.cnFontChars00EeNew[i] = cunChar;
                }
            }

            File.WriteAllText(this.baseFolder + @"\Bio2Page0Char.txt", string.Join("", this.cnFontChars00EeNew), Encoding.UTF8);
        }

        private void CreateFont()
        {
            //this.CreateFont(File.ReadAllText(this.baseFolder + @"\font\Page0Chars.txt"));

            string[] cnTxt = File.ReadAllLines(this.baseFolder + @"\font\Page1To7Chars.txt");
            int index = 1;
            for (int i = 0; i < 2; i += 2)
            {
                this.CreateFont(index++, cnTxt[i + 1]);
            }
        }

        private void CreateFont(int index, string chars)
        {
            Bitmap bmp = new Bitmap(256, 256);
            Graphics g = Graphics.FromImage(bmp);
            g.Clear(Color.Black);
            g.SmoothingMode = SmoothingMode.HighQuality;
            g.CompositingQuality = CompositingQuality.HighQuality;
            g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;

            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            sf.LineAlignment = StringAlignment.Center;

            // 在指定的区域内写入特定汉字
            for (int i = 0; i < chars.Length; i++)
            {
                GraphicsPath graphPath = new GraphicsPath();
                RectangleF rectangle = new RectangleF((i % 18) * 14, (i / 18) * 14 + 1, 14f, 14f);
                graphPath.AddString(chars.Substring(i, 1), new FontFamily("宋体"), (int)FontStyle.Regular, 13.5F, rectangle, sf);
                g.FillPath(Brushes.White, graphPath);
            }

            bmp.Save(this.baseFolder + @"\font\font" + index + ".png");
        }

        private void CreateFont(string chars)
        {
            Bitmap bmp = new Bitmap(256, 256);
            Graphics g = Graphics.FromImage(bmp);
            g.Clear(Color.Black);
            g.SmoothingMode = SmoothingMode.HighQuality;
            g.CompositingQuality = CompositingQuality.HighQuality;
            g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;

            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            sf.LineAlignment = StringAlignment.Center;

            // 在指定的区域内写入特定汉字
            //Font font = new System.Drawing.Font("LiSu", 13F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Pixel, ((byte)(134)));
            //Pen blackPen = new Pen(Color.White, 0.01F);
            //SolidBrush shadowBrush = new SolidBrush(Color.White);
            for (int i = 0; i < chars.Length; i++)
            {
                GraphicsPath graphPath = new GraphicsPath();
                RectangleF rectangle = new RectangleF((i % 18) * 14, 28 + (i / 18) * 14 + 1, 14f, 14f);
                graphPath.AddString(chars.Substring(i, 1), new FontFamily("宋体"), (int)FontStyle.Regular, 13.5F, rectangle, sf);
                g.FillPath(Brushes.White, graphPath);
                //g.FillPath(shadowBrush, graphPath);
                //g.DrawPath(blackPen, graphPath);
                //g.DrawString(chars.Substring(i, 1), font, Brushes.White, rectangle);
            }

            Bitmap oldCnImg = new Bitmap(this.baseFolder + @"\font\font01.png");
            for (int i = 0; i < this.cnFontChars00Ee.Length; i++)
            {
                if ("▷▿▵「」ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxyz0123456789".Contains(this.cnFontChars00Ee[i]))
                {
                    int startX = (i % 18) * 14;
                    int startY = 28 + (i / 18) * 14;
                    for (int y = startY; y < startY + 14; y++)
                    {
                        for (int x = startX; x < startX + 14; x++)
                        {
                            bmp.SetPixel(x, y, oldCnImg.GetPixel(x, y));
                        }
                    }
                }
            }

            bmp.Save(this.baseFolder + @"\font\font0.png");
        }

        private string[] ToArray(string txt)
        {
            string[] page0Chars = new string[txt.Length];
            for (int i = 0; i < txt.Length; i++)
            {
                page0Chars[i] = txt.Substring(i, 1);
            }

            return page0Chars;
        }

        private void Create8BppTim()
        {
            //byte[] byCopyTim = File.ReadAllBytes(this.baseFolder + @"\Pic\config\con0.tim");
            //byte[] byNewTim = new byte[0x220 + 320 * 240];
            //Array.Copy(byCopyTim, 0, byNewTim, 0, 0x220);

            //byNewTim[0x21f] = 0x0;
            //byNewTim[0x21e] = 0xF0;
            //byNewTim[0x21d] = 0x0;
            //byNewTim[0x21c] = 0xA0;

            //byNewTim[0x216] = 0x1;
            //byNewTim[0x215] = 0x2C;
            //byNewTim[0x214] = 0x0C;

            //File.WriteAllBytes(this.baseFolder + @"\Pic\config\newWarning.tim", byNewTim);

            //System.Diagnostics.Process exep = new System.Diagnostics.Process();
            //exep.StartInfo.FileName = @".\AdtCom.exe";
            //exep.StartInfo.CreateNoWindow = true;
            //exep.StartInfo.UseShellExecute = false;

            //string timFile = this.baseFolder + @"\Pic\config\newWarning.tim";
            //string adtFile = this.baseFolder + @"\Pic\config\Gwarning.adt";
            //exep.StartInfo.Arguments = "e " + timFile + " " + adtFile;
            //exep.Start();
            //exep.WaitForExit();

            int len = File.ReadAllBytes(this.baseFolder + @"\Pic\r704cJp.adt").Length;

            byte[] byAdt = File.ReadAllBytes(this.baseFolder + @"\Pic\r704cCn.adt");
            byte[] byNew = new byte[len];
            Array.Copy(byAdt, 0, byNew, 0, byAdt.Length);

            File.WriteAllBytes(this.baseFolder + @"\Pic\r704c.adt", byNew);

            len = File.ReadAllBytes(this.baseFolder + @"\Pic\r704lJp.adt").Length;

            byAdt = File.ReadAllBytes(this.baseFolder + @"\Pic\r704lCn.adt");
            byNew = new byte[len];
            Array.Copy(byAdt, 0, byNew, 0, byAdt.Length);

            File.WriteAllBytes(this.baseFolder + @"\Pic\r704l.adt", byNew);
        }

        /// <summary>
        /// 打包中文文件
        /// </summary>
        private void CopyCnFiles()
        {
            string Bio2Ngc = this.baseFolder + @"\";
            int copyCount = File.ReadAllLines(Bio2Ngc + @"Bio2PsNgcRdtA.txt").Length / 2 + File.ReadAllLines(Bio2Ngc + @"Bio2PsNgcRdtB.txt").Length / 2
                + File.ReadAllLines(Bio2Ngc + @"Bio2NgcComDataFile.txt").Length + File.ReadAllLines(Bio2Ngc + @"Bio2NgcComFile.txt").Length
                + File.ReadAllLines(Bio2Ngc + @"Bio2NgcConfigFile.txt").Length
                + 2;

            // 显示进度条
            this.ResetProcessBar(copyCount);

            // 复制Rel
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\");
            string leonRel = Bio2Ngc + @"Bio2NgcCn\root\leon.rel";
            string claireRel = Bio2Ngc + @"Bio2NgcCn\root\claire.rel";
            File.Copy(leonRel, leonRel.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);
            File.Copy(claireRel, claireRel.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);

            // 更新进度条
            this.ProcessBarStep();
            this.ProcessBarStep();

            // 复制A盘Rdt文件
            string[] copyFiles = File.ReadAllLines(Bio2Ngc + @"Bio2PsNgcRdtA.txt");
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\Pl0\Rdt\");
            for (int i = 0; i < copyFiles.Length; i += 2)
            {
                string rdtFile = Bio2Ngc + @"Bio2NgcCn\root\Pl0\Rdt\" + copyFiles[i];
                File.Copy(rdtFile, rdtFile.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 复制B盘Rdt文件
            copyFiles = File.ReadAllLines(Bio2Ngc + @"Bio2PsNgcRdtB.txt");
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\Pl1\Rdt\");
            for (int i = 0; i < copyFiles.Length; i += 2)
            {
                string rdtFile = Bio2Ngc + @"Bio2NgcCn\root\Pl1\Rdt\" + copyFiles[i];
                File.Copy(rdtFile, rdtFile.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 复制共通字库、字幕文件
            copyFiles = File.ReadAllLines(Bio2Ngc + @"Bio2NgcComDataFile.txt");
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\common\Data\");
            for (int i = 0; i < copyFiles.Length; i++)
            {
                string comDataFile = Bio2Ngc + @"Bio2NgcCn\root\common\Data\" + copyFiles[i];
                File.Copy(comDataFile, comDataFile.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 复制文档文件
            copyFiles = File.ReadAllLines(Bio2Ngc + @"Bio2NgcComFile.txt");
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\common\file\");
            for (int i = 0; i < copyFiles.Length; i++)
            {
                string comDataFile = Bio2Ngc + @"Bio2NgcCn\root\common\file\" + copyFiles[i];
                string targetFile = comDataFile.Replace("Bio2NgcCn", "Bio2NgcPatch");
                File.Copy(comDataFile, targetFile, true);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 复制设定文件
            copyFiles = File.ReadAllLines(Bio2Ngc + @"Bio2NgcConfigFile.txt");
            Directory.CreateDirectory(Bio2Ngc + @"Bio2NgcPatch\root\common\config\");
            for (int i = 0; i < copyFiles.Length; i++)
            {
                string comDataFile = Bio2Ngc + @"Bio2NgcCn\root\common\config\" + copyFiles[i];
                File.Copy(comDataFile, comDataFile.Replace("Bio2NgcCn", "Bio2NgcPatch"), true);

                // 更新进度条
                this.ProcessBarStep();
            }

            MessageBox.Show("打包完成！");
        }

        /// <summary>
        /// 活动PsNgc中共通的文件
        /// </summary>
        private void GetPsNgcBinDiff()
        {
            string[] binLines = File.ReadAllLines(this.baseFolder + @"\Bio2PsNgcBin.txt");
            byte[] byPsJp = File.ReadAllBytes(this.baseFolder + @"\Bio2PsJP\A\SLPS_015.10");
            byte[] byPsCn = File.ReadAllBytes(this.baseFolder + @"\Bio2PsCn\A\SLPS_015.10");

            byte[] byNgcCn = File.ReadAllBytes(this.baseFolder + @"\Bio2NgcCn\root\leon.rel");
            byte[] byNgcCn2 = File.ReadAllBytes(this.baseFolder + @"\Bio2NgcCn\root\claire.rel");

            byte[] byNgcJp = File.ReadAllBytes(this.baseFolder + @"\Bio2NgcJp\root\leon.rel");
            byte[] byNgcJp2 = File.ReadAllBytes(this.baseFolder + @"\Bio2NgcJp\root\claire.rel");

            StringBuilder psJpSb = new StringBuilder();
            StringBuilder psCnSb = new StringBuilder();
            StringBuilder ngcCnSb = new StringBuilder();

            // 显示进度条
            this.ResetProcessBar(binLines.Length);

            for (int i = 0; i < binLines.Length; i += 2)
            {
                string[] names = binLines[i].Split(' ');
                string[] addrs = binLines[i + 1].Split(' ');

                if (addrs.Length == 4)
                {
                    byte[] byData = new byte[Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16)];
                    Array.Copy(byPsCn, Convert.ToInt32(addrs[0], 16), byData, 0, byData.Length);

                    Array.Copy(byData, 0, byNgcCn, Convert.ToInt32(addrs[2], 16), byData.Length);

                    byte[] byData2 = new byte[byData.Length];
                    Array.Copy(byNgcJp, Convert.ToInt32(addrs[2], 16), byData2, 0, byData2.Length);
                    int jp2Pos = this.GetTextStartPos(byNgcJp2, byData2);
                    if (jp2Pos > 0)
                    {
                        Array.Copy(byData, 0, byNgcCn2, jp2Pos, byData.Length);

                        ngcCnSb.Append("claire.rel");
                        ngcCnSb.Append(jp2Pos.ToString("x") + " ");
                        ngcCnSb.Append((jp2Pos + (Convert.ToInt32(addrs[3], 16) - Convert.ToInt32(addrs[2], 16))).ToString("x"));
                        ngcCnSb.Append("\r\n");
                    }
                    else
                    {
                        MessageBox.Show("没找到" + i);
                    }
                }
                else if (i == binLines.Length - 2)
                {
                    byte[] byData = new byte[Convert.ToInt32(addrs[2], 16) - Convert.ToInt32(addrs[0], 16) + 1];
                    Array.Copy(byPsCn, Convert.ToInt32(addrs[0], 16), byData, 0, Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16));
                    Array.Copy(byPsCn, Convert.ToInt32(addrs[1], 16), byData, Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16) + 1, Convert.ToInt32(addrs[2], 16) - Convert.ToInt32(addrs[1], 16));

                    Array.Copy(byData, 0, byNgcCn, Convert.ToInt32(addrs[3], 16), byData.Length);

                    byte[] byData2 = new byte[byData.Length];
                    Array.Copy(byNgcJp, Convert.ToInt32(addrs[3], 16), byData2, 0, byData2.Length);
                    int jp2Pos = this.GetTextStartPos(byNgcJp2, byData2);
                    if (jp2Pos > 0)
                    {
                        Array.Copy(byData, 0, byNgcCn2, jp2Pos, byData.Length);

                        ngcCnSb.Append("claire.rel");
                        ngcCnSb.Append(jp2Pos.ToString("x") + " ");
                        ngcCnSb.Append((jp2Pos + (Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16))).ToString("x") + " ");
                        ngcCnSb.Append((jp2Pos + (Convert.ToInt32(addrs[4], 16) - Convert.ToInt32(addrs[3], 16))).ToString("x"));
                        ngcCnSb.Append("\r\n");
                    }
                    else
                    {
                        MessageBox.Show("没找到" + i);
                    }
                }
                else
                {
                    byte[] byData = new byte[Convert.ToInt32(addrs[2], 16) - Convert.ToInt32(addrs[0], 16) - 1];
                    Array.Copy(byPsCn, Convert.ToInt32(addrs[0], 16), byData, 0, Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16));
                    Array.Copy(byPsCn, Convert.ToInt32(addrs[1], 16) + 1, byData, Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16), Convert.ToInt32(addrs[2], 16) - Convert.ToInt32(addrs[1], 16) - 1);

                    Array.Copy(byData, 0, byNgcCn, Convert.ToInt32(addrs[3], 16), byData.Length);

                    byte[] byData2 = new byte[byData.Length];
                    Array.Copy(byNgcJp, Convert.ToInt32(addrs[3], 16), byData2, 0, byData2.Length);
                    int jp2Pos = this.GetTextStartPos(byNgcJp2, byData2);
                    if (jp2Pos > 0)
                    {
                        Array.Copy(byData, 0, byNgcCn2, jp2Pos, byData.Length);

                        ngcCnSb.Append("claire.rel");
                        ngcCnSb.Append(jp2Pos.ToString("x") + " ");
                        ngcCnSb.Append((jp2Pos + (Convert.ToInt32(addrs[1], 16) - Convert.ToInt32(addrs[0], 16))).ToString("x") + " ");
                        ngcCnSb.Append((jp2Pos + (Convert.ToInt32(addrs[4], 16) - Convert.ToInt32(addrs[3], 16))).ToString("x"));
                        ngcCnSb.Append("\r\n");
                    }
                    else
                    {
                        MessageBox.Show("没找到" + i);
                    }
                }                

                // 更新进度条
                this.ProcessBarStep();
            }

            File.WriteAllBytes(this.baseFolder + @"\Bio2NgcCn\root\leon.rel", byNgcCn);
            //File.WriteAllBytes(this.baseFolder + @"\Bio2NgcCn\root\claire.rel", byNgcCn2);
            //File.WriteAllText(this.baseFolder + @"\Bio2NgcRelB_1.txt", ngcCnSb.ToString());

            // 隐藏进度条
            this.CloseProcessBar();

            MessageBox.Show("OK!");
        }

        /// <summary>
        /// 得到Ps文本在Ngc中的位置
        /// </summary>
        private void GetPsDiffAddr()
        {
            string jpFolder = this.baseFolder + @"\Bio2PsJp\A\PL0\RDT";
            string ngcFolder = this.baseFolder + @"\Bio2NgcJp\root\PL0\RDT";
            if ("B".Equals(this.subDisk))
            {
                jpFolder = this.baseFolder + @"\Bio2PsJp\B\PL1\RDT";
                ngcFolder = this.baseFolder + @"\Bio2NgcJp\root\PL1\RDT";
            }

            List<FilePosInfo> files = Util.GetAllFiles(jpFolder).Where(p => !p.IsFolder).ToList();
            StringBuilder psSb = new StringBuilder();
            StringBuilder ngcSb = new StringBuilder();

            // 显示进度条
            this.ResetProcessBar(files.Count);

            foreach (FilePosInfo fileInfo in files)
            {
                byte[] byJp = File.ReadAllBytes(fileInfo.File);
                byte[] byCn = File.ReadAllBytes(fileInfo.File.Replace("Bio2PsJp", "Bio2PsCn"));

                int diffPos = 0;
                while (diffPos < byJp.Length && byJp[diffPos] == byCn[diffPos])
                {
                    diffPos++;
                }
                if (diffPos < byJp.Length)
                {
                    fileInfo.TextStart = diffPos;

                    diffPos = byJp.Length - 1;
                    while (diffPos >= 0 && byJp[diffPos] == byCn[diffPos])
                    {
                        diffPos--;
                    }

                    fileInfo.TextEnd = diffPos;

                    string fileName = Util.GetShortName(fileInfo.File);
                    psSb.Append(fileName);
                    psSb.Append("\r\n");
                    psSb.Append(fileInfo.TextStart.ToString("x"));
                    psSb.Append(" ");
                    psSb.Append(fileInfo.TextEnd.ToString("x"));

                    byte[] byTxtJp = new byte[fileInfo.TextEnd - fileInfo.TextStart];
                    Array.Copy(byJp, fileInfo.TextStart, byTxtJp, 0, byTxtJp.Length);
                    int ngcStartPos = this.getNgcTextStartPos(ngcFolder + @"\" + fileName, byTxtJp);
                    if (ngcStartPos > 0)
                    {
                        byte[] byTxtCn = new byte[byTxtJp.Length];
                        Array.Copy(byCn, fileInfo.TextStart, byTxtCn, 0, byTxtCn.Length);

                        psSb.Append(" ");
                        psSb.Append(ngcStartPos.ToString("x"));
                        psSb.Append("\r\n");
                    }
                }

                // 更新进度条
                this.ProcessBarStep();
            }

            File.WriteAllText(this.baseFolder + @"\Bio2PsNgcRdt" + this.subDisk + ".txt", psSb.ToString());

            // 隐藏进度条
            this.CloseProcessBar();
        }

        /// <summary>
        /// 设置当前Ps区域状态
        /// </summary>
        /// <param name="isPs"></param>
        private void SetPsLoadStatus(bool isPs)
        {
            this.chkPsBin.Checked = isPs;
            this.chkPsBin.Enabled = isPs;
        }

        /// <summary>
        /// 设置当前Ngc区域状态
        /// </summary>
        /// <param name="isNgc"></param>
        private void SetNgcLoadStatus(bool isNgc)
        {
            this.chkNgcDol.Checked = isNgc;
            this.chkNgcDol.Enabled = isNgc;
        }

        /// <summary>
        /// 重新设置字库
        /// </summary>
        /// <param name="index"></param>
        private void ResetFontChar(int index)
        {
            string[] page0Chars = this.ToArray(File.ReadAllText(this.baseFolder + @"\font\Page0Chars.txt"));
            string[] pageChars = File.ReadAllLines(this.baseFolder + @"\font\Page1To7Chars.txt");
            string[] currentChars = this.ToArray(pageChars[index * 2 - 1]);
            this.ReadFontFile(this.cnFontCharPage, page0Chars, currentChars);

            //if ("A".Equals(this.subDisk))
            //{
            //    switch (index)
            //    {
            //        case 1:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF0_A);
            //            break;

            //        case 2:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF02_A);
            //            break;

            //        case 3:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF03_A);
            //            break;

            //        case 4:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF04_A);
            //            break;

            //        case 5:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF05_A);
            //            break;

            //        case 6:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF06_A);
            //            break;

            //        case 7:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF07_A);
            //            break;
            //    }
            //}
            //else
            //{
            //    switch (index)
            //    {
            //        case 1:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF0_B);
            //            break;

            //        case 2:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF02_B);
            //            break;

            //        case 3:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF03_B);
            //            break;

            //        case 4:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF04_B);
            //            break;

            //        case 5:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF05_B);
            //            break;

            //        case 6:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF06_B);
            //            break;

            //        case 7:
            //            this.ReadFontFile(this.cnFontCharPage, this.cnFontChars00Ee, this.cnFontCharsEfF07_B);
            //            break;
            //    }
            //}
        }

        /// <summary>
        /// 保存文本数据
        /// </summary>
        /// <param name="ngcFile"></param>
        /// <param name="byJpData"></param>
        private int getNgcTextStartPos(string ngcFile, byte[] byPsJpData)
        {
            if (File.Exists(ngcFile))
            {
                try
                {
                    // 根据Ps日文文本数据，查找Ngc中的文本数据
                    return this.GetTextStartPos(File.ReadAllBytes(ngcFile), byPsJpData);
                }
                catch
                {
                    return -1;
                }
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// 根据Ps文本数据，查找Ngc中的文本数据
        /// </summary>
        /// <param name="byData"></param>
        /// <param name="byJpData"></param>
        /// <returns></returns>
        private int GetTextStartPos(byte[] byData, byte[] byJpData)
        {
            // 二进制检索
            bool findedKey = true;
            int maxLen = byData.Length - byJpData.Length;
            this.maxFindLen = 0;

            for (int j = 0; j < maxLen; j++)
            {
                if (byData[j] == byJpData[0])
                {
                    findedKey = true;
                    for (int i = 1; i < byJpData.Length; i++)
                    {
                        if (byData[j + i] != byJpData[i])
                        {
                            findedKey = false;
                            this.maxFindLen = Math.Max(this.maxFindLen, i);
                            break;
                        }
                    }

                    if (findedKey)
                    {
                        return j;
                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 取得文本数据
        /// </summary>
        /// <param name="jpFile"></param>
        /// <param name="cnFile"></param>
        /// <param name="addrInfo"></param>
        /// <param name="byJpData"></param>
        /// <param name="byCnData"></param>
        private bool GetTextData(string jpFile, string cnFile, string[] addrInfo, byte[] byJpData, byte[] byCnData)
        {
            FileStream fs = null;

            try
            {
                int startPos = Convert.ToInt32(addrInfo[0], 16);
                int endPos = Convert.ToInt32(addrInfo[1], 16);

                fs = new FileStream(jpFile, FileMode.Open);
                fs.Seek(startPos, SeekOrigin.Begin);
                fs.Read(byJpData, 0, byJpData.Length);
                fs.Close();

                fs = new FileStream(cnFile, FileMode.Open);
                fs.Seek(startPos, SeekOrigin.Begin);
                fs.Read(byCnData, 0, byCnData.Length);
                fs.Close();
            }
            catch
            {
                return false;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }

            return true;
        }

        /// <summary>
        /// 根据配置文件，读入需要汉化的文件
        /// </summary>
        /// <returns></returns>
        private List<FilePosInfo> LoadFiles()
        {
            List<FilePosInfo> needCopyFiles = new List<FilePosInfo>();

            if (this.rdoNgc.Checked)
            {
                if (this.chkNgcDol.Checked)
                {
                    //needCopyFiles.AddRange(this.LoadFiles(this.baseFolder + @"\Bio2NgcRel" + this.subDisk + ".txt"));
                    needCopyFiles.AddRange(this.LoadFiles(this.baseFolder + @"\helpPc\Bio2PcAddr.txt"));
                }

                if (this.chkNgcRdt.Checked)
                {
                    needCopyFiles.AddRange(this.LoadFiles(this.baseFolder + @"\Bio2PsNgcRdt" + this.subDisk + ".txt"));
                }
            }
            else
            {
                if (this.chkPsBin.Checked)
                {
                    needCopyFiles.AddRange(this.LoadFiles(this.baseFolder + @"\Bio2PsBin.txt"));
                }
            }

            return needCopyFiles;
        }

        /// <summary>
        /// 开始解码
        /// </summary>
        /// <param name="byData"></param>
        /// <param name="startPos"></param>
        private string DecodeText(byte[] byData, FilePosInfo filePosInfo, Dictionary<int, string[]> fontCharPage)
        {
            if (filePosInfo.File.EndsWith(".rdt", StringComparison.OrdinalIgnoreCase))
            {
                int startPos = ((byData[0x3f] << 24) | (byData[0x3e] << 16) | (byData[0x3d] << 8) | byData[0x3c]);
                int endPos = (byData[0x43] << 24) | (byData[0x42] << 16) | (byData[0x41] << 8) | byData[0x40];
                List<int> entryList = new List<int>();
                int txtStartPos = startPos + (byData[startPos + 1] << 8 | byData[startPos]);

                for (int i = startPos; i < txtStartPos; i += 2)
                {
                    entryList.Add(startPos + (byData[i + 1] << 8 | byData[i]));
                }
                //entryList.Add(endPos);

                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < entryList.Count - 1; i++)
                {
                    sb.Append(this.DecodeText(byData, fontCharPage, entryList[i], entryList[i + 1]));
                }

                // 取得最后一句
                int textEndPos = startPos + (byData[currentFileInfo.TextStart - 1] << 8 | byData[currentFileInfo.TextStart - 2]);
                if (endPos == 0)
                {
                    endPos = byData.Length;
                }
                while (textEndPos < endPos)
                {
                    if (byData[textEndPos] == 0xF7)
                    {
                        textEndPos++;
                        break;
                    }

                    if (byData[textEndPos] == 0xFE)
                    {
                        textEndPos += 2;
                        break;
                    }

                    textEndPos++;
                }
                sb.Append(this.DecodeText(byData, fontCharPage, entryList[entryList.Count - 1], textEndPos));

                return sb.ToString();
            }
            else if (filePosInfo.EntryPos > 0)
            {
                int entryStart = filePosInfo.TextEnd;
                int entryEnd = filePosInfo.EntryPos;
                List<int> entryList = new List<int>();
                for (int i = entryStart; i < entryEnd; i += 2)
                {
                    entryList.Add(filePosInfo.TextStart + Util.GetOffset(byData, i, i + 1));
                }

                StringBuilder sb = new StringBuilder();
                int startPos;
                for (int i = 0; i < entryList.Count - 1; i++)
                {
                    startPos = entryList[i];
                    int endPos = entryList[i + 1];
                    if (endPos < startPos)
                    {
                        //sb.Append(startPos.ToString("X").PadLeft(2, '0')).Append(" ").Append(endPos.ToString("X").PadLeft(2, '0')).Append(" ");
                        if (i < entryList.Count - 2)
                        {
                            i++;
                            endPos = entryList[i + 1];
                            sb.Append("^fe 00^ \n");
                        }
                        else
                        {
                            break;
                        }
                    }
                    //sb.Append(startPos.ToString("X").PadLeft(2, '0')).Append(" ").Append(endPos.ToString("X").PadLeft(2, '0')).Append(" ");
                    sb.Append(this.DecodeText(byData, fontCharPage, startPos, endPos));
                }

                // 取得最后一句
                int textEndPos = entryList[entryList.Count - 1];
                while (textEndPos < filePosInfo.EntryPos)
                {
                    if (byData[textEndPos] == 0xF7)
                    {
                        textEndPos++;
                        break;
                    }

                    if (byData[textEndPos] == 0xFE)
                    {
                        textEndPos += 2;
                        break;
                    }

                    textEndPos++;
                }
                //sb.Append(entryList[entryList.Count - 1].ToString("X").PadLeft(2, '0')).Append(" ").Append(textEndPos.ToString("X").PadLeft(2, '0')).Append(" ");
                sb.Append(this.DecodeText(byData, fontCharPage, entryList[entryList.Count - 1], textEndPos));

                return sb.ToString();
            }
            else 
            {
                return this.DecodeText(byData, fontCharPage, filePosInfo.TextStart, filePosInfo.TextEnd);
            }
        }

        /// <summary>
        /// 开始解码
        /// </summary>
        /// <param name="byData"></param>
        /// <param name="startPos"></param>
        private string DecodeText(byte[] byData, Dictionary<int, string[]> fontCharPage, int startPos, int endPos)
        {
            StringBuilder sb = new StringBuilder();
            int temp;
            for (int j = startPos; j < endPos; j++)
            {
                switch (byData[j])
                {
                    case 0xF7:
                        sb.Append("^f7^");
                        continue;

                    case 0xF4:
                    case 0xF9: // 绿颜色
                        sb.Append("^" + byData[j].ToString("x") + " " + byData[j + 1].ToString("x") + "^");
                        j += 1;
                        continue;

                    case 0xFA:
                        if (byData[j + 2] == 0xFC)
                        {
                            sb.Append("^fa " + byData[j + 1].ToString("x") + " fc^");
                            j += 2;
                        }
                        else if (byData[j + 1] == 0x01)
                        {
                            sb.Append("^fa 01 " + byData[j + 2].ToString("x") + " " + byData[j + 3].ToString("x") + "^");
                            j += 3;
                        }
                        else if (byData[j + 1] == 0x02)
                        {
                            if (byData[j + 2] == 0xFE || byData[j + 2] == 0xFD)
                            {
                                sb.Append("^fa 02 " + byData[j + 2].ToString("x") + " " + byData[j + 3].ToString("x") + "^");
                                j += 3;
                            }
                            else
                            {
                                sb.Append("^fa 02^");
                                j += 1;
                            }
                        }
                        else 
                        {
                            sb.Append("^fa^");
                        }
                        continue;

                    case 0xFB:
                        if (byData[j + 2] == 0xFE)
                        {
                            sb.Append("^fb " + byData[j + 1].ToString("x") + "^");
                            j += 2;
                        }
                        else
                        {
                            sb.Append("^fb " + byData[j + 1].ToString("x") + "^");
                            j += 1;
                        }
                        continue;

                    case 0xFD:
                        sb.Append("^fd " + byData[j + 1].ToString("x") + "^");
                        j += 1;
                        continue;

                    case 0xFE:
                        if (byData[j + 1] == 0)
                        {
                            sb.Append("^fe 00^");
                            j += 1;
                        }
                        else
                        {
                            sb.Append("^fe^");
                        }
                        continue;

                    case 0:
                        sb.Append("　");
                        continue;
                }



                temp = byData[j];

                if (fontCharPage.ContainsKey(temp))
                {
                    if (!(temp == 0xEA || temp == 0xEB || temp == 0xED || temp == 0xEE || temp == 0xEF || temp == 0xF0))
                    {
                        sb.Append("^" + temp.ToString("x") + " " + byData[j + 1].ToString("x") + "^");
                        j++;
                        continue;
                    }

                    string[] pageChars = fontCharPage[temp];
                    if (byData[j + 1] < pageChars.Length)
                    {
                        sb.Append(pageChars[byData[j + 1]]);
                        j++;
                    }
                    else
                    {
                        sb.Append("^" + temp.ToString("x") + " " + byData[j + 1].ToString("x") + "^");
                        j++;
                    }
                }
                else
                {
                    string[] pageChars = fontCharPage[0];
                    if (temp < pageChars.Length)
                    {
                        sb.Append(pageChars[temp]);
                    }
                    else
                    {
                        sb.Append("^" + temp.ToString("x") + "^");
                    }
                }
            }

            //return "==" + startPos.ToString("x") + "--" + endPos.ToString("x") + "==" + sb.ToString();
            string cnText = sb.ToString();
            if (!cnText.EndsWith("\n"))
            {
                return cnText + " \n";
            }
            else
            {
                return cnText;
            }
        }

        /// <summary>
        /// 读取字库信息
        /// </summary>
        private void ReadFontFile(Dictionary<int, string[]> fontCharPage, string[] chars00Ee, string[] charsEfF0)
        {
            fontCharPage.Clear();

            try
            {
                string[] page = new string[0xEE];
                fontCharPage.Add(0, page);
                for (int i = 0; i < page.Length; i++)
                {
                    page[i] = chars00Ee[i];
                }

                page = new string[chars00Ee.Length - page.Length + 4];
                fontCharPage.Add(0xEE, page);
                for (int i = 0; i < page.Length; i++)
                {
                    page[i] = chars00Ee[0xEA + i];
                }

                //fontCharPage.Add(0xEF, charsEfF0);

                page = new string[252];
                fontCharPage.Add(0xEF, page);
                for (int i = 0; i < page.Length && i < charsEfF0.Length; i++)
                {
                    page[i] = charsEfF0[i];
                }

                if (charsEfF0.Length > page.Length)
                {
                    page = new string[charsEfF0.Length - page.Length];
                    fontCharPage.Add(0xF0, page);
                    for (int i = 0; i < page.Length; i++)
                    {
                        page[i] = charsEfF0[252 + i];
                    }
                }

                //page = new string[216 + 0x24];
                //fontCharPage.Add(0xED, page);
                //for (int i = 0; i < 216; i++)
                //{
                //    page[0x24 + i] = charsEdEe[i];
                //}

                //page = new string[72];
                //fontCharPage.Add(0xEE, page);
                //for (int i = 216; i < charsEdEe.Length; i++)
                //{
                //    page[i - 216] = charsEdEe[i];
                //}

                //page = new string[256];
                //fontCharPage.Add(0xEF, page);
                //for (int i = 0; i < 256; i++)
                //{
                //    page[i] = charsEfF0[i];
                //}

                //page = new string[charsEfF0.Length - 256];
                //fontCharPage.Add(0xF0, page);
                //for (int i = 256; i < charsEfF0.Length; i++)
                //{
                //    page[i - 256] = charsEfF0[i];
                //}
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
                return;
            }
        }

        /// <summary>
        /// CopyPs的文本到Ngc
        /// </summary>
        private void CopyPsToNgc()
        {
            // 取得需要Copy的文件
            List<FilePosInfo> needCopyFilesRdt = new List<FilePosInfo>();
            needCopyFilesRdt.AddRange(this.LoadFiles(this.baseFolder + @"\Bio2PsNgcRdt" + this.subDisk + @".txt"));
            if (needCopyFilesRdt.Count == 0)
            {
                MessageBox.Show("路径错误，没有找到需要Copy的文件！");
                return;
            }

            // 显示进度条
            this.ResetProcessBar(needCopyFilesRdt.Count);

            StringBuilder saveFaileFiles = new StringBuilder();
            string jpFolder = this.baseFolder + @"\Bio2PsJp\A\PL0\RDT";
            string ngcFolder = this.baseFolder + @"\Bio2NgcCn\root\PL0\RDT";
            if ("B".Equals(this.subDisk))
            {
                jpFolder = this.baseFolder + @"\Bio2PsJp\B\PL1\RDT";
                ngcFolder = this.baseFolder + @"\Bio2NgcCn\root\PL1\RDT";
            }

            // 开始循环所有的日文rdt文件
            foreach (FilePosInfo fileInfo in needCopyFilesRdt)
            {
                // 取得各个文件名
                string jpFile = jpFolder + @"\" + fileInfo.File;
                string ngcFile = ngcFolder + @"\" + fileInfo.File;

                if (File.Exists(jpFile)
                    && File.Exists(ngcFile))
                {
                    // 取得文本数据
                    byte[] byJpData = new byte[fileInfo.TextEnd - fileInfo.TextStart];
                    byte[] byCnData = new byte[byJpData.Length];
                    this.GetTextData(jpFile, jpFile.ToLower().Replace("bio2psjp", "bio2pscn"), fileInfo.PosInfo, byJpData, byCnData);

                    // 保存文本数据
                    this.SaveTextData(ngcFile, fileInfo.EntryPos, byCnData, saveFaileFiles, fileInfo.File);
                }

                // 更新进度条
                this.ProcessBarStep();
            }

            // 隐藏进度条
            this.CloseProcessBar();

            if (saveFaileFiles.Length > 0)
            {
                MessageBox.Show("下面文件失败：\n" + saveFaileFiles.ToString());
            }
        }

        /// <summary>
        /// 保存文本数据
        /// </summary>
        /// <param name="ngcFile"></param>
        /// <param name="cnTxtPos"></param>
        /// <param name="byCnData"></param>
        /// <param name="saveFaileFiles"></param>
        private void SaveTextData(string ngcCnFile, int cnTxtPos, byte[] byCnData, StringBuilder saveFaileFiles, string sortName)
        {
            this.baseFile = ngcCnFile;
            if (!this.SaveTextData(ngcCnFile, cnTxtPos, byCnData))
            {
                saveFaileFiles.Append(ngcCnFile + " : " + sortName).Append("\n");
            }
        }

        /// <summary>
        /// 保存文本数据
        /// </summary>
        /// <param name="ngcCnFile"></param>
        /// <param name="cnTxtPos"></param>
        /// <param name="byCnData"></param>
        /// <returns></returns>
        private bool SaveTextData(string ngcCnFile, int cnTxtPos, byte[] byCnData)
        {
            try
            {
                // 取得Ngc数据
                byte[] byNgcData = File.ReadAllBytes(ngcCnFile);

                // 将中文数据写入Ngc数据
                Array.Copy(byCnData, 0, byNgcData, cnTxtPos, byCnData.Length);

                // 保存中文数据
                File.WriteAllBytes(ngcCnFile, byNgcData);
            }
            catch
            {
                return false;
            }

            return true;
        }

        #endregion

        private void btnPcHelper_Click(object sender, EventArgs e)
        {
            this.baseFolder = @"G:\Study\MySelfProject\Hanhua\TodoCn\HanhuaProject\Bio2";
            this.ResetFontChar(1);

            string testStr = "しばらくお待ちください";
            StringBuilder chkStr = new StringBuilder();
            int idx = 0;
            for (int i = 0; i < testStr.Length - 1; i++)
            {
                byte[] byTst = this.EncodeJpChar(testStr.Substring(i, 1));
                idx = 0;
                while (idx < byTst.Length)
                {
                    chkStr.Append(byTst[idx].ToString("X").PadLeft(2, '0'));
                    idx++;
                }
            }
        }

        /// <summary>
        /// 取得当前文字的编码
        /// </summary>
        /// <param name="currenChar">当前文字</param>
        /// <returns>当前文字的编码</returns>
        private byte[] EncodeJpChar(string currentChar)
        {
            // 在字库中查找
            foreach (int fontPage in this.jpFontCharPage.Keys)
            {
                string[] pageFonts = this.jpFontCharPage[fontPage];
                for (int i = 0; i < pageFonts.Length; i++)
                {
                    if (currentChar == pageFonts[i])
                    {
                        if (fontPage == 0)
                        {
                            return new byte[] { (byte)i };
                        }
                        else
                        {
                            return new byte[] { (byte)fontPage, (byte)i };
                        }
                    }
                }
            }

            throw new Exception("未查询到相应的日文字符 : " + currentChar);
        }
    }
}
